<?xml version='1.0'?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
]>

<chapter id="pythonforyouandme-Strings">
	<title>Strings</title>
	<para>
		Strings are nothing but simple text. In python we declare strings in between "" or '' or ''' ''' or """ """. The examples below will help you to understand sting in a better way.
	</para>

<programlisting language="Python">
 <![CDATA[>>> s = "I am Indian"
>>> s
'I am Indian'
>>> s = 'I am Indian'
>>> s = "Here is a line \
... splitted in two lines"
>>> s
'Here is a line splitted in two lines'
>>> s = "Here is a line \n splitted in two lines"
>>> s
'Here is a line \n splitted in two lines'
>>> print s
Here is a line
 splitted in two lines]]>
 </programlisting>
	<para>
		Now if you want to multiline strings you have to use triple single/double quotes.
	</para>
<programlisting language="Python">
<![CDATA[>>> s = """ This is a
... multiline string, so you can
... write many lines"""
>>> print s
 This is a
multiline string, so you can
write many lines]]>
</programlisting>
	<section id="pythonforyouandme-Strings-methods">
		<title>Different methods available for Strings</title>
		<para>
			Every string object is having couple of buildin methods available, we already saw some of them like <emphasis>s.split(" ")</emphasis>.
		</para>
<programlisting language="Python">
<![CDATA[>>> s = "kushal das"
>>> s.title()
'Kushal Das']]>
</programlisting>
		<para>
			<emphasis>title()</emphasis> method returns a titlecased version of the string, words start with uppercase characters, all remaining cased characters are lowercase.
		</para>
<programlisting language="Python">
<![CDATA[>>> z = s.upper()
>>> z
'KUSHAL DAS'
>>> z.lower()
'kushal das']]>
</programlisting>
		<para>
			<emphasis>upper()</emphasis> returns a total uppercase version whereas <emphasis>lower()</emphasis> returns a lower case version of the string.
		</para>
<programlisting language="Python">
<![CDATA[>>> s = "I am A pRoGraMMer"
>> s.swapcase()
'i AM a PrOgRAmmER']]>
</programlisting>
		<para>
			<emphasis>swapcase()</emphasis> returns the string with case swapped :)
		</para>
<programlisting language="Python">
<![CDATA[>>> s = "jdwb 2323bjb"
>>> s.isalnum()
False
>>> s = "jdwb2323bjb"
>>> s.isalnum()
True]]>
</programlisting>
	<para>
	Because of the space in the first line <emphasis>isalnum()</emphasis> returned <emphasis>False</emphasis> , it checks for all charecters are alpha numeric or not.
	</para>
<programlisting language="Python">
<![CDATA[>>> s = "SankarshanSir"
>>> s.isalpha()
True
>>> s = "Sankarshan Sir"
>>> s.isalpha()
False]]>
</programlisting>
	<para>
	<emphasis>isalpha()</emphasis> checkes for only alphabets.
	</para>
<programlisting language="Python">
<![CDATA[>>> s = "1234"
>>> s.isdigit() #To check if all the characters are digits or not
True
>>> s = "Fedora9 is coming"
>>> s.islower() # To check if all chracters are lower case or not
False
>>> s = "Fedora9 Is Coming" 
>>> s.istitle() # To check if it is a title or not
True
>>> s = "INDIA"
>>> s.isupper() # To check if characters are in upper case or not
True]]>
</programlisting>
	<para>
		To split any string we have <emphasis>split()</emphasis>. It takes a string as an argument , depending on that it will split the main string and returns a list containing splitted strings.
	</para>
<programlisting language="Python">
<![CDATA[>>> s = "We all love Python"
>>> s.split(" ")
['We', 'all', 'love', 'Python']
>>> x = "Nishant:is:waiting"
>>> x.split(':')
['Nishant', 'is', 'waiting']]]>
</programlisting>
	<para>
		The opposite method for <emphasis>split()</emphasis> is <emphasis>join()</emphasis>. It takes a list contains strings as input and join them.
	</para>
<programlisting language="Python">
<![CDATA[>>> "-".join("GNU/Linux is great".split(" "))
'GNU/Linux-is-great']]>
</programlisting>
	<para>
		In the above example first we are splitting the string "GNU/Linux is great" based on the white space, then joining them with "-".
	</para>
	</section>
	
	<section id="pythonforyouandme-Strings-strip">
		<title>Strip the strings</title>
		<para>
			Strings do have few methods to do striping. The simplest one is <emphasis>strip(chars)</emphasis>. If you provide the chars argument then it will strip any combination of them. By default it strips only whitespace or newline characters.
		</para>
<programlisting language="Python">
<![CDATA[>>> s = "  abc\n "
>>> s.strip()
'abc']]>
</programlisting>
		<para>
			You can particularly strip from the left hand or right hand side also using <emphasis>lstrip(chars)</emphasis> or <emphasis>rstrip(chars)</emphasis>.
		</para>
<programlisting language="Python">
<![CDATA[>>> s = "www.foss.in"
>>> s.lstrip("cwsd.")
'foss.in'
>>> s.rstrip("cnwdi.")
'www.foss']]>
</programlisting>
	</section>	
	
	<section id="pythonforyouandme-Strings-find">
		<title>Finding text</title>
		<para>
			Stings have some methods which will help you in finding text/substring in a string. Examples are given below:
		</para>
<programlisting language="Python">
<![CDATA[>>> s.find("for")
7
>>> s.find("fora")
-1
>>> s.startswith("fa") #To check if the string startswith fa or not
True
>>> s.endswith("reason") #
True]]>
</programlisting>
	<para>
	<emphasis>find()</emphasis> helps to find the first occurrence of the substring given, if not found it returns -1.
	</para>
	</section>
	

	<section id="pythonforyouandme-Strings-palindrome">
		<title>Palindrome checking</title>
		<para>
			Palindrome are the kind of strings which are same from left or right whichever way you read them. Example "madam". In this example we will take the word as input from the user and say if it is palindrome or not.
		</para>
<programlisting language="Python">
<![CDATA[#!/usr/bin/env python
s = raw_input("Please enter a string: ")
z = s[::-1]
if s == z
    print "The string is a palindrome"
else:
    print "The string is not a palindrome"]]>
</programlisting>
		<para>
			The output
		</para>
<programlisting language="Python">
<![CDATA[[kd@kdlappy book]$ ./palindrome.py
Please enter a string: madam1
The string is not a palindrome
[kd@kdlappy book]$ ./palindrome.py
Please enter a string: madam
The string is a palindrome]]>
</programlisting>
	</section>
	<section id="pythonforyouandme-Strings-number">
		<title>Number of words</title>
		<para>
			In this example we will count the number of words in a given line
		</para>
<programlisting language="Python">
<![CDATA[#!/usr/bin/env python
s = raw_input("Enter a line: ")
print "The number of words in the line are %d" % (len(s.split(" ")))]]>
</programlisting>
		<para>The output</para>
<programlisting language="Python">
<![CDATA[[kd@kdlappy book]$ ./countwords.py
Enter a line: Sayamindu is a great programmer
The number of words in the line are 5 ]]>
</programlisting>
	</section>

</chapter>

