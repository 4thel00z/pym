<?xml version='1.0'?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
]>

<chapter id="pythonforyouandme-The-Beginning">
	<title>The Beginning</title>
	<para>
		So we are going to look at our first code. As python is an interpreted language , you can directly write the code into the python interpreter or write in a file and then run the file. First we are going to do that using the interpreter, to start type python in the command prompt (shell or terminal).
	</para>
<screen>
[kd@kdlappy ~]$ <userinput>python</userinput>
Python 2.5.1 (r251:54863, Oct 30 2007, 13:54:11)
[GCC 4.1.2 20070925 (Red Hat 4.1.2-33)] on linux2
Type "help", "copyright", "credits" or "license" for more information. 
>>> 
</screen>
<para>
In our first code we are going to print "Hello World!" , so do it as below,
</para>
<screen>
>>> <userinput>print "Hello World!"</userinput>
Hello World!
</screen>

	<section id="pythonforyouandme-The-Beginning-Section_1_helloworldpy">
		<title>helloworld.py</title>
		<para>
			Now as a serious programmer you may want to write the above code into a source file. We will create a helloworld.py. Use any text editor you like to create the file. I used vi, you can even use GUI based tools like Kate, gedit too.
		</para>
<screen>
#!/usr/bin/env python
print "Hello World!"
</screen>
                <para>
                To run the code first you have to make the file executable, in GNU/Linux you can do that by giving the command in a shell or terminal
                </para>
<screen>
$ <userinput>chmod +x helloworld.py</userinput>
</screen>
                <para>
                Then
                </para>
<screen>
$ <userinput>./helloworld.py </userinput>
Hello World!
</screen>
                <para>
                On the first line you can <emphasis>#!</emphasis> , we call it sha-bang. Using this we are telling that use python interpreter to run this code. In the next line we are printing a text message. In python we call all the line of texts as strings.
                </para>

	</section>
	
	<section id="pythonforyouandme-The-Beginning-whin">
		<title>Whitespaces and indentation</title>
		<para>
			In Python whitespace is an important thing. We divide different identifiers using spaces.Whitespace in the beginning of the line is known as indentation, but if you give wrong indentation it will throw an error. Examples are given below:
		</para>
<screen>
<![CDATA[
>>> a = 12
>>>  a = 12
  File "<stdin>", line 1
      a = 12
          ^
          IndentationError: unexpected indent]]>
</screen>
        <warning>
            <title>Warning</title>
            <para>
                There is an extra space in the beginning of the second line which is causing the error, so always look for the proper indentation.
            </para>
            <para>
            You can even get into this indentation errors if you mix up tabs and spaces. Like if you use spaces and only use spaces for indentation, don't use tabs in that case. For you it may look same, but the code will give you error if you try to run it.
            </para>
        </warning>
	</section>
	
        <section id="pythonforyouandme-The-Beginning-comments">
		<title>Comments</title>
		<para>
			Comments are some piece of English text which explains what this code does, we write comments in the code so that is easier for others to  understand. A comment line starts with <emphasis>#</emphasis> , everything after that is ignored as comment, that means they don't effect on the program.
		</para>
<screen>
<![CDATA[
>>> #this is a comment
>>> #the next line will add two numbers
>>> a = 12 + 34
>>> print c #this is a comment too :)]]>
</screen>

	</section>
        <section id="pythonforyouandme-The-Beginning-modules">
		<title>Modules</title>
		<para>
			Modules are python files which contain different function definitions , variables which we can reuse, it should always end with a .py extension.. Python itself is having a vast module library with the default installation. We are going to use some of them. To use a module you have to import it first.
		</para>
<screen>
<![CDATA[
>>> import math
>>> print math.e
2.71828182846
]]>
</screen>
                <para>
                    We are going to learn more about modules on the Modules chapter.
                </para>
	</section>

</chapter>

