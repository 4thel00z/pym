<?xml version='1.0'?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
]>

<chapter id="pythonforyouandme-Variables-Datatypes">
	<title>Variables and Datatypes</title>
	<para>
		Every programming language is having own grammar rules just like the other languages we speak.
	</para>
	<section id="pythonforyouandme-Variables-Datatypes-keywords-identifires">
		<title>Keywords and Identifiers</title>
		<para>
			Python codes can be divided into identifiers. Identifiers (also referred to as names) are described by the following lexical definitions:
		</para>
<screen>
<![CDATA[
identifier ::= (letter|"_") (letter | digit | "_")* 
letter ::= lowercase | uppercase 
lowercase ::= "a"..."z" 
uppercase ::= "A"..."Z" 
digit ::= "0"..."9"
]]>
</screen>
                <para>
                    This means <emphasis>_abcd</emphasis> is a valid identifier where as <emphasis>1sd</emphasis> is not. The following identifiers are used as reserved words, or keywords of the language, and cannot be used as ordinary identifiers. They must be spelled exactly as written here:
                </para>
<screen>
<![CDATA[
and       del      from      not   while 
as        elif     global    or    with 
assert    else     if        pass  yield 
break     except   import    print 
class     exec     in        raise 
continue  finally  is        return 
def       for      lambda    try
]]>
</screen>
                <para>
                    In Python we don't specify what kind of data we are going to put in a variable. So you can directly write abc = 1 and abc will become an integer datatype. If you write abc = 1.0 abc will become of floating type. Here is a small program to add two given numbers
                </para>
<screen>
<![CDATA[
>>> a = 13 
>>> b = 23
>>> a + b 
36
]]>
</screen>
                <para>
                    From the above example you can understand that to declare a variable in python , what you need is just to type the name and the value. Python can also manipulate strings They can be enclosed in single quotes or double quotes like
                </para>
<screen>
<![CDATA[
>>> 'India'
'India' 
>>> 'India\'s best' 
"India's best" 
>>> "Hello World!" 
'Hello World!'
]]>
</screen>
	</section>
	
	<section id="pythonforyouandme-Variables-Datatypes-input">
		<title>Reading input from the Keyboard</title>
		<para>
			Generally the real life python codes do not need to read input from the keyboard. In python we use raw_input function to do input. <emphasis>raw_input("String to show")</emphasis> , this will return a string as output. Let us write a program to read a number from the keyboard and check if it is less than 100 or not. Name of the program is testhundred.py
		</para>
<screen>
<![CDATA[
#!/usr/bin/env python   
number = int(raw_input("Enter an integer: "))
if number < 100:   
    print "Your number is smaller than 100"   
else:   
    print "Your number is greater than 100" 
]]>
</screen>
		<para>
			The output
		</para>
<screen>
<![CDATA[
[kd@kdlappy book]$ ./testhundred.py 
Enter an integer: 13 
Your number is smaller than 100 
[kd@kdlappy book]$ ./testhundred.py 
Enter an integer: 123 
Your number is greater than 100
]]>
</screen>
        <para>
            In the next program we are going to calculate investments.
        </para>
<screen>
<![CDATA[
#!/usr/bin/env python 
amount = float(raw_input("Enter amount: ")) 
inrate = float(raw_input("Enter Interest rate: ")) 
period = int(raw_input("Enter period: ")) 
value = 0 
year = 1 
while year <= period:
    value = amount + (inrate * amount)
    print "Year %d Rs. %.2f" %(year, value)
    amount = value
    year = year + 1 
]]>
</screen>
        <para>
                The output
        </para> 
<screen>
<![CDATA[
[kd@kdlappy book]$ ./investment.py
Enter amount: 10000
Enter Interest rate: 0.14
Enter period: 5
Year 1 Rs. 11400.00
Year 2 Rs. 12996.00
Year 3 Rs. 14815.44
Year 4 Rs. 16889.60
Year 5 Rs. 19254.15
]]>
</screen> 
	</section>
	<section id="pythonforyouandme-Variables-Datatypes-Examples">
		<title>Some Examples</title>
		<para>
		    Some examples of variables and datatypes: 
		</para>
		<section id="pythonforyouandme-Variables-Datatypes-average">
		    <title>Average of N numbers</title>
		    <para>
		    In the next program we will do an average of N numbers.
		    </para>
<programlisting language="Python"><![CDATA[#!/usr/bin/env python
N = 10
sum = 0
count = 0
while count < N:
    number = float(raw_input(""))
    sum = sum + number
    count = count + 1
average = float(sum)/N
print "N = %d , Sum = %f" % (N, sum)
print "Average = %f" % average
]]>
</programlisting>
            <para>
                The output
            </para>
<screen>
<![CDATA[
[kd@kdlappy book]$ ./averagen.py
1
2.3
4.67
1.42
7
3.67
4.08
2.2
4.25
8.21
N = 10 , Sum = 38.800000
Average = 3.880000
]]>
</screen>                 
	    </section>
	    <section id="pythonforyouandme-Variables-Datatypes-temparatue">
		    <title>Temperature conversion</title>
		    <para>
			    In this program we will convert the given temperature to Celsius from Fahrenheit by using the formula C=(F-32)/1.8
		    </para>
<screen>
<![CDATA[
#!/usr/bin/env python
fahrenhite = 0.0
print "Fahrenheit Celsius"
while fahrenheit <= 250:
    celsius = ( fahrenheit - 32.0 ) / 1.8 #Here we calculate the fahrenhite value
    print "%5.1f %7.2f" % (fahrenheit , celsius)
    fahrenheit = fahrenheit + 25
]]>
</screen>
            <para>
            The output
            </para> 
<screen>
<![CDATA[
[kd@kdlappy book]$ ./temperature.py
Fahrenheit Celsius
  0.0  -17.78
 25.0   -3.89
 50.0   10.00
 75.0   23.89
100.0   37.78
125.0   51.67
150.0   65.56
175.0   79.44
200.0   93.33
225.0  107.22
250.0  121.11
]]>
</screen>           
    	</section>
	</section>


	<section id="pythonforyouandme-Variables-Datatypes-singleline">
		<title>Multiple assignments in a single line</title>
		<para>
			You can even assign values to multiple variables in a single line, like
		</para>
<screen>
<![CDATA[
>>> a , b = 45, 54
>>> a
45
>>> b
54
]]>
</screen>
    <para>
        Using this swapping two numbers becomes very easy
    </para>
<screen>
<![CDATA[
>>> a, b = b , a
>>> a
54
>>> b
45
]]>
</screen>    
	</section>

</chapter>

