# SOME DESCRIPTIVE TITLE.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: http://bugs.kde.org\n"
"POT-Creation-Date: 2008-12-24 15:13+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <kde-i18n-doc@kde.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: application/x-xml2pot; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Tag: title
#: looping.xml:6
#, no-c-format
msgid "Looping"
msgstr ""

#. Tag: para
#: looping.xml:7
#, no-c-format
msgid ""
"In the examples we used before , sometimes it was required to do the same "
"work couple of times. We use a counter to check how many times the code "
"needs to be executed. This technique is known as looping. First we are going "
"to look into while statement for looping."
msgstr ""

#. Tag: title
#: looping.xml:12
#, no-c-format
msgid "While loop"
msgstr ""

#. Tag: para
#: looping.xml:13
#, no-c-format
msgid "The syntax for <emphasis>while</emphasis> statement is like"
msgstr ""

#. Tag: screen
#: looping.xml:16
#, no-c-format
msgid ""
"<![CDATA[\n"
"while condition:\n"
"    statement1\n"
"    statement2\n"
"]]>"
msgstr ""

#. Tag: para
#: looping.xml:17
#, no-c-format
msgid ""
"The code we want to reuse must be indented properly under the while "
"statement. They will be executed if the <emphasis>condition</emphasis> is "
"true. Again like in <emphasis>if-else</emphasis> statement any non zero "
"value is true. Let us write a simple code to print numbers 0 to 10"
msgstr ""

#. Tag: screen
#: looping.xml:20
#, no-c-format
msgid ""
"<![CDATA[\n"
">>> n = 0\n"
">>> while n < 11:\n"
"...     print n\n"
"...     n += 1\n"
"...\n"
"0\n"
"1\n"
"2\n"
"3\n"
"4\n"
"5\n"
"6\n"
"7\n"
"8\n"
"9\n"
"10\n"
"]]>"
msgstr ""

#. Tag: para
#: looping.xml:21
#, no-c-format
msgid ""
"In the first line we are setting <emphasis>n = 0</emphasis>, then in the "
"while statement the condition is <emphasis>n <![CDATA[<]]> 11 </emphasis>, "
"that means what ever line indented below that will execute until n becomes "
"same or greater than 11. Inside the loop we are just printing the value of n "
"and then increasing it by one."
msgstr ""

#. Tag: title
#: looping.xml:27
#, no-c-format
msgid "Fibonacci Series"
msgstr ""

#. Tag: para
#: looping.xml:28
#, no-c-format
msgid ""
"Let us try to solve <emphasis>Fibonacci</emphasis> series. In this series we "
"get the next number by adding the previous two numbers. So the series looks "
"like <emphasis>1,1,2,3,5,8,13 .......</emphasis>"
msgstr ""

#. Tag: screen
#: looping.xml:31
#, no-c-format
msgid ""
"<![CDATA[\n"
"#!/usr/bin/env python\n"
"a, b = 0, 1\n"
"while b < 100:\n"
"    print b\n"
"    a, b = b, a + b\n"
"]]>"
msgstr ""

#. Tag: para
#: looping.xml:32 looping.xml:43 looping.xml:54 looping.xml:72 looping.xml:91
#: looping.xml:95 looping.xml:99 looping.xml:149
#, no-c-format
msgid "The output"
msgstr ""

#. Tag: screen
#: looping.xml:35
#, no-c-format
msgid ""
"<![CDATA[\n"
"[kd@kdlappy book]$ ./fibonacci1.py\n"
"1\n"
"1\n"
"2\n"
"3\n"
"5\n"
"8\n"
"13\n"
"21\n"
"34\n"
"55\n"
"89\n"
"]]>"
msgstr ""

#. Tag: para
#: looping.xml:36
#, no-c-format
msgid ""
"In the first line of the code we are initializing <emphasis>a</emphasis> and "
"<emphasis>b</emphasis>, then looping while b's value is less than 100. "
"Inside the loop first we are printing the value of <emphasis>b</emphasis> "
"and then in the next line putting the value of <emphasis>b</emphasis> to "
"<emphasis>a</emphasis> and <emphasis>a + b</emphasis> to <emphasis>b</"
"emphasis> in the same line."
msgstr ""

#. Tag: para
#: looping.xml:39
#, no-c-format
msgid ""
"If you put a trailing comma in the <emphasis>print</emphasis> statement , "
"then it will print in the same line"
msgstr ""

#. Tag: screen
#: looping.xml:42
#, no-c-format
msgid ""
"<![CDATA[\n"
"#!/usr/bin/env python\n"
"a, b = 0, 1\n"
"while b < 100:\n"
"    print b,\n"
"    a, b = b, a + b\n"
"]]>"
msgstr ""

#. Tag: screen
#: looping.xml:46
#, no-c-format
msgid ""
"<![CDATA[\n"
"[kd@kdlappy book]$ ./fibonacci2.py\n"
"1 1 2 3 5 8 13 21 34 55 89\n"
"]]>"
msgstr ""

#. Tag: title
#: looping.xml:49
#, no-c-format
msgid "Power Series"
msgstr ""

#. Tag: para
#: looping.xml:50
#, no-c-format
msgid ""
"Let us write a program to evaluate the power series. The series looks like "
"e**x =1+x+x**2/2! +x**3/3! +....+ x**n/n! where <![CDATA[0 <x <1]]>"
msgstr ""

#. Tag: screen
#: looping.xml:53
#, no-c-format
msgid ""
"<![CDATA[\n"
"#!/usr/bin/env python\n"
"x = float(raw_input(\"Enter the value of x: \"))\n"
"n = term = num = 1\n"
"sum = 1.0\n"
"while n <= 100:\n"
"    term *= x / n\n"
"    sum += terrm\n"
"    n += 1\n"
"    if term < 0.0001:\n"
"        break\n"
"print \"No of Times= %d and Sum= %f\" % (n, sum)\n"
"]]>"
msgstr ""

#. Tag: screen
#: looping.xml:55
#, no-c-format
msgid ""
"<![CDATA[\n"
"kd@kdlappy book]$ ./powerseries.py\n"
"Enter the value of x: 0\n"
"No of Times= 2 and Sum= 1.000000\n"
"[kd@kdlappy book]$ ./powerseries.py\n"
"Enter the value of x: 0.1\n"
"No of Times= 5 and Sum= 1.105171\n"
"[kd@kdlappy book]$ ./powerseries.py\n"
"Enter the value of x: 0.5\n"
"No of Times= 7 and Sum= 1.648720\n"
"]]>"
msgstr ""

#. Tag: para
#: looping.xml:56
#, no-c-format
msgid ""
"In this program we introduced a new keyword called <emphasis>break</"
"emphasis>. What break does is stop the innermost loop. In this example we "
"are using <emphasis>break</emphasis> under the <emphasis>if</emphasis> "
"statement"
msgstr ""

#. Tag: screen
#: looping.xml:59
#, no-c-format
msgid ""
"<![CDATA[\n"
"if term < 0.0001:\n"
"        break\n"
"]]>"
msgstr ""

#. Tag: para
#: looping.xml:60
#, no-c-format
msgid ""
"This means if the value of <emphasis>term</emphasis> is less than "
"<emphasis>0.0001</emphasis> then get out of the loop."
msgstr ""

#. Tag: title
#: looping.xml:67
#, no-c-format
msgid "Multiplication Table"
msgstr ""

#. Tag: para
#: looping.xml:68
#, no-c-format
msgid ""
"In this example we are going to print the multiplication table up to 10."
msgstr ""

#. Tag: screen
#: looping.xml:71
#, no-c-format
msgid ""
"<![CDATA[\n"
"#!/usr/bin/env python\n"
"i = 1\n"
"print \"-\" * 50\n"
"while i < 11:\n"
"    n = 1\n"
"    while n <= 10:\n"
"        print \"%4d\" % (i * n),\n"
"        n += 1\n"
"    print \"\"\n"
"    i += 1\n"
"print \"-\" * 50\n"
"]]>"
msgstr ""

#. Tag: screen
#: looping.xml:73
#, no-c-format
msgid ""
"<![CDATA[\n"
"[kd@kdlappy book]$ ./multiplication.py\n"
"--------------------------------------------------\n"
"   1    2    3    4    5    6    7    8    9   10\n"
"   2    4    6    8   10   12   14   16   18   20\n"
"   3    6    9   12   15   18   21   24   27   30\n"
"   4    8   12   16   20   24   28   32   36   40\n"
"   5   10   15   20   25   30   35   40   45   50\n"
"   6   12   18   24   30   36   42   48   54   60\n"
"   7   14   21   28   35   42   49   56   63   70\n"
"   8   16   24   32   40   48   56   64   72   80\n"
"   9   18   27   36   45   54   63   72   81   90\n"
"  10   20   30   40   50   60   70   80   90  100\n"
"--------------------------------------------------\n"
"]]>"
msgstr ""

#. Tag: para
#: looping.xml:74
#, no-c-format
msgid ""
"Here we used one while loop inside another loop, this is known as nested "
"looping. You can also see one interesting statement here"
msgstr ""

#. Tag: screen
#: looping.xml:76
#, no-c-format
msgid ""
"<![CDATA[\n"
"print \"-\" * 50\n"
"]]>"
msgstr ""

#. Tag: para
#: looping.xml:77
#, no-c-format
msgid ""
"In a <emphasis>print</emphasis> statement if we multiply the string with an "
"integer <emphasis>n</emphasis> , the string will be printed <emphasis>n</"
"emphasis>many times. Some examples"
msgstr ""

#. Tag: screen
#: looping.xml:81
#, no-c-format
msgid ""
"<![CDATA[\n"
">>> print \"*\" * 10\n"
"**********\n"
">>> print \"#\" * 20\n"
"####################\n"
">>> print \"--\" * 20\n"
"----------------------------------------\n"
">>> print \"-\" * 40\n"
"----------------------------------------\n"
"]]>"
msgstr ""

#. Tag: title
#: looping.xml:85
#, no-c-format
msgid "Some printing * examples"
msgstr ""

#. Tag: para
#: looping.xml:86
#, no-c-format
msgid ""
"Here are some examples which you can find very often in college lab reports"
msgstr ""

#. Tag: para
#: looping.xml:89
#, no-c-format
msgid "Design 1"
msgstr ""

#. Tag: screen
#: looping.xml:90
#, no-c-format
msgid ""
"<![CDATA[\n"
"#!/usr/bin/env python\n"
"row = int(raw_input(\"Enter the number of rows: \"))\n"
"n = row\n"
"while n >= 0:\n"
"    x =  \"*\" * n\n"
"    print x\n"
"    n -= 1\n"
"]]>"
msgstr ""

#. Tag: screen
#: looping.xml:92
#, no-c-format
msgid ""
"<![CDATA[\n"
"[kd@kdlappy book]$ ./design1.py\n"
"Enter the number of rows: 5\n"
"*****\n"
"****\n"
"***\n"
"**\n"
"*\n"
"]]>"
msgstr ""

#. Tag: para
#: looping.xml:93
#, no-c-format
msgid "Design 2"
msgstr ""

#. Tag: screen
#: looping.xml:94
#, no-c-format
msgid ""
"<![CDATA[\n"
"#!/usr/bin/env python\n"
"n = int(raw_input(\"Enter the number of rows: \"))\n"
"i = 1\n"
"while i <= n:\n"
"    print \"*\" * i\n"
"    i += 1\n"
"]]>"
msgstr ""

#. Tag: screen
#: looping.xml:96
#, no-c-format
msgid ""
"<![CDATA[\n"
"[kd@kdlappy book]$ ./design2.py\n"
"Enter the number of rows: 5\n"
"*\n"
"**\n"
"***\n"
"****\n"
"*****\n"
"]]>"
msgstr ""

#. Tag: para
#: looping.xml:97
#, no-c-format
msgid "Design 3"
msgstr ""

#. Tag: screen
#: looping.xml:98
#, no-c-format
msgid ""
"<![CDATA[\n"
"#!/usr/bin/env python\n"
"row = int(raw_input(\"Enter the number of rows: \"))\n"
"n = row\n"
"while n >= 0:\n"
"    x =  \"*\" * n\n"
"    y = \" \" * (row - n)\n"
"    print y + x\n"
"    n -= 1\n"
"]]>"
msgstr ""

#. Tag: screen
#: looping.xml:100
#, no-c-format
msgid ""
"<![CDATA[\n"
"[kd@kdlappy book]$ ./design3.py\n"
"Enter the number of rows: 5\n"
"*****\n"
" ****\n"
"  ***\n"
"   **\n"
"    *\n"
"]]>"
msgstr ""

#. Tag: title
#: looping.xml:104
#, no-c-format
msgid "Lists"
msgstr ""

#. Tag: para
#: looping.xml:105
#, no-c-format
msgid ""
"We are going to learn a data structure called list before we go ahead to "
"learn more on looping. Lists an be written as a list of comma-separated "
"values (items) between square brackets."
msgstr ""

#. Tag: screen
#: looping.xml:108
#, no-c-format
msgid ""
"<![CDATA[\n"
">>> a = [ 1 , 342, 2233423, 'India', 'Fedora']\n"
">>> a\n"
"[1, 342, 2233423, 'India', 'Fedora']\n"
"]]>"
msgstr ""

#. Tag: para
#: looping.xml:109
#, no-c-format
msgid ""
"Lists can keep any other data inside it. It works as a sequence too, that "
"means"
msgstr ""

#. Tag: screen
#: looping.xml:110
#, no-c-format
msgid ""
"<![CDATA[\n"
">>> a[0]\n"
"1\n"
">>> a[4]\n"
"'Fedora'\n"
"]]>"
msgstr ""

#. Tag: para
#: looping.xml:111
#, no-c-format
msgid "You can even slice it into different pieces, examples are given below"
msgstr ""

#. Tag: screen
#: looping.xml:112
#, no-c-format
msgid ""
"<![CDATA[\n"
">>> a[4]\n"
"'Fedora'\n"
">>> a[-1]\n"
"'Fedora'\n"
">>> a[-2]\n"
"'India'\n"
">>> a[0:-1]\n"
"[1, 342, 2233423, 'India']\n"
">>> a[2:-2]\n"
"[2233423]\n"
">>> a[:-2]\n"
"[1, 342, 2233423]\n"
">>> a[0::2]\n"
"[1, 2233423, 'Fedora']\n"
"]]>"
msgstr ""

#. Tag: para
#: looping.xml:113
#, no-c-format
msgid ""
"In the last example we used two :(s) , the last value inside the third "
"brackets indicates step. <emphasis>s[i:j:k]</emphasis> means slice of "
"<emphasis>s</emphasis> from <emphasis>i</emphasis> to <emphasis>j</emphasis> "
"with step <emphasis>k</emphasis>."
msgstr ""

#. Tag: para
#: looping.xml:114
#, no-c-format
msgid "To check if any value exists within the list or not you can do"
msgstr ""

#. Tag: screen
#: looping.xml:115
#, no-c-format
msgid ""
"<![CDATA[\n"
">>> a = ['Fedora', 'is', 'cool']\n"
">>> 'cool' in a\n"
"True\n"
">>> 'Linux' in a\n"
"False\n"
"]]>"
msgstr ""

#. Tag: para
#: looping.xml:116
#, no-c-format
msgid ""
"That means we can use the above statement as <emphasis>if</emphasis> clause "
"expression. The built-in function <emphasis>len()</emphasis> can tell the "
"length of a list."
msgstr ""

#. Tag: screen
#: looping.xml:117
#, no-c-format
msgid ""
"<![CDATA[\n"
">>> len(a)\n"
"3\n"
"]]>"
msgstr ""

#. Tag: title
#: looping.xml:120
#, no-c-format
msgid "For loop"
msgstr ""

#. Tag: para
#: looping.xml:121
#, no-c-format
msgid ""
"There is another to loop by using <emphasis>for</emphasis> statement. In "
"python the <emphasis>for</emphasis> statement is different from the way it "
"works in <emphasis>C</emphasis>. Here for statement iterates over the items "
"of any sequence (a list or a string). Example given below"
msgstr ""

#. Tag: screen
#: looping.xml:124
#, no-c-format
msgid ""
"<![CDATA[\n"
">>> a = ['Fedora', 'is', 'powerfull']\n"
">>> for x in a:\n"
"...     print x,\n"
"...\n"
"Fedora is powerfull\n"
"]]>"
msgstr ""

#. Tag: para
#: looping.xml:125
#, no-c-format
msgid "We can also do things like"
msgstr ""

#. Tag: screen
#: looping.xml:128
#, no-c-format
msgid ""
">>> a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n"
">>> for x in a[::2]:\n"
"...     print x\n"
"...\n"
"1\n"
"3\n"
"5\n"
"7\n"
"9"
msgstr ""

#. Tag: title
#: looping.xml:132
#, no-c-format
msgid "range() function"
msgstr ""

#. Tag: para
#: looping.xml:133
#, no-c-format
msgid "range() is a buitin function. From the help document"
msgstr ""

#. Tag: screen
#: looping.xml:136
#, no-c-format
msgid ""
"<![CDATA[\n"
"range(...)\n"
"    range([start,] stop[, step]) -> list of integers\n"
"    Return a list containing an arithmetic progression of integers.\n"
"    range(i, j) returns [i, i+1, i+2, ..., j-1]; start (!) defaults to 0.\n"
"    When step is given, it specifies the increment (or decrement).\n"
"    For example, range(4) returns [0, 1, 2, 3].  The end point is omitted!\n"
"    These are exactly the valid indices for a list of 4 elements.\n"
"]]>"
msgstr ""

#. Tag: para
#: looping.xml:137
#, no-c-format
msgid ""
"Now if you want to see this help message on your system type <emphasis>help"
"(range)</emphasis> in the python interpreter. <emphasis>help(s)</emphasis> "
"will return help message on the object <emphasis>s</emphasis>. Examples of "
"<emphasis>range</emphasis> function"
msgstr ""

#. Tag: screen
#: looping.xml:140
#, no-c-format
msgid ""
"<![CDATA[\n"
">>> range(1,5)\n"
"[1, 2, 3, 4]\n"
">>> range(1,15,3)\n"
"[1, 4, 7, 10, 13]\n"
">>> range(10)\n"
"[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n"
"]]>"
msgstr ""

#. Tag: title
#: looping.xml:144
#, no-c-format
msgid "Continue statement"
msgstr ""

#. Tag: para
#: looping.xml:145
#, no-c-format
msgid ""
"Just like <emphasis>break</emphasis> we have another statement, "
"<emphasis>continue</emphasis>, which skips the execution of the code after "
"itself and goes back to the start of the loop. That means it will help you "
"to skip a part of the loop. In the below example we will ask the user to "
"input an integer, if the input is negative then we will ask again, if "
"positive then we will square the number. To get out of the infinite loop "
"user must input 0."
msgstr ""

#. Tag: screen
#: looping.xml:148
#, no-c-format
msgid ""
"<![CDATA[\n"
"#!/usr/bin/env python\n"
"while True:\n"
"    n = int(raw_input(\"Please enter an Integer: \"))\n"
"    if n < 0:\n"
"        continue #this will take the execution back to the starting of the "
"loop\n"
"    elif n == 0:\n"
"        break\n"
"    print \"Square is \", n ** 2\n"
"print \"Goodbye\"\n"
"]]>"
msgstr ""

#. Tag: screen
#: looping.xml:152
#, no-c-format
msgid ""
"[kd@kdlappy book]$ ./continue.py\n"
"Please enter an Integer: 34\n"
"Square is 1156\n"
"Please enter an Integer: 4\n"
"Square is 16\n"
"Please enter an Integer: -9\n"
"Please enter an Integer: 0\n"
"Goodbye"
msgstr ""

#. Tag: title
#: looping.xml:157
#, no-c-format
msgid "Else loop"
msgstr ""

#. Tag: para
#: looping.xml:158
#, no-c-format
msgid ""
"We can have an optional <emphasis>else</emphasis> statement after any loop. "
"It will be executed after the loop unless a <emphasis>break</emphasis> "
"statement stopped the loop."
msgstr ""

#. Tag: screen
#: looping.xml:161
#, no-c-format
msgid ""
"<![CDATA[\n"
">>> for i in range(0,5):\n"
"...     print i\n"
"... else:\n"
"...     print \"Bye bye\"\n"
"...\n"
"0\n"
"1\n"
"2\n"
"3\n"
"4\n"
"Bye bye\n"
"]]>"
msgstr ""

#. Tag: para
#: looping.xml:162
#, no-c-format
msgid ""
"We will see more example of <emphasis>break</emphasis> and "
"<emphasis>continue</emphasis> later in the book."
msgstr ""
