# 
# AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: 0\n"
"POT-Creation-Date: 2011-11-05T11:20:40\n"
"PO-Revision-Date: 2011-11-05T11:20:40\n"
"Last-Translator: Automatically generated\n"
"Language-Team: None\n"
"MIME-Version: 1.0\n"
"Content-Type: application/x-publican; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Tag: title
#, no-c-format
msgid "Strings"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Strings are nothing but simple text. In python we declare strings in between \"\" or '' or ''' ''' or \"\"\" \"\"\". The examples below will help you to understand sting in a better way."
msgstr ""

#. Tag: screen
#, no-c-format
msgid "\n"
"\n"
"&gt;&gt;&gt; s = \"I am Indian\"\n"
"&gt;&gt;&gt; s\n"
"'I am Indian'\n"
"&gt;&gt;&gt; s = 'I am Indian'\n"
"&gt;&gt;&gt; s = \"Here is a line \\\n"
"... splitted in two lines\"\n"
"&gt;&gt;&gt; s\n"
"'Here is a line splitted in two lines'\n"
"&gt;&gt;&gt; s = \"Here is a line \n"
" splitted in two lines\"\n"
"&gt;&gt;&gt; s\n"
"'Here is a line \n"
" splitted in two lines'\n"
"&gt;&gt;&gt; print s\n"
"Here is a line\n"
" splitted in two lines	 \n"
"\n"
""
msgstr ""

#. Tag: para
#, no-c-format
msgid "Now if you want to multiline strings you have to use triple single/double quotes."
msgstr ""

#. Tag: screen
#, no-c-format
msgid "\n"
"\n"
"&gt;&gt;&gt; s = \"\"\" This is a\n"
"... multiline string, so you can\n"
"... write many lines\"\"\"\n"
"&gt;&gt;&gt; print s\n"
" This is a\n"
"multiline string, so you can\n"
"write many lines\n"
"\n"
""
msgstr ""

#. Tag: title
#, no-c-format
msgid "Different methods available for Strings"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Every string object is having couple of buildin methods available, we already saw some of them like <emphasis>s.split(\" \")</emphasis>."
msgstr ""

#. Tag: screen
#, no-c-format
msgid "\n"
"\n"
"&gt;&gt;&gt; s = \"kushal das\"\n"
"&gt;&gt;&gt; s.title()\n"
"'Kushal Das' \n"
"\n"
""
msgstr ""

#. Tag: para
#, no-c-format
msgid "<emphasis>title()</emphasis> method returns a titlecased version of the string, words start with uppercase characters, all remaining cased characters are lowercase."
msgstr ""

#. Tag: screen
#, no-c-format
msgid "\n"
"\n"
"&gt;&gt;&gt; z = s.upper()\n"
"&gt;&gt;&gt; z\n"
"'KUSHAL DAS'\n"
"&gt;&gt;&gt; z.lower()\n"
"'kushal das'\n"
"\n"
""
msgstr ""

#. Tag: para
#, no-c-format
msgid "<emphasis>upper()</emphasis> returns a total uppercase version whereas <emphasis>lower()</emphasis> returns a lower case version of the string."
msgstr ""

#. Tag: screen
#, no-c-format
msgid "\n"
"\n"
"&gt;&gt;&gt; s = \"I am A pRoGraMMer\"\n"
"&gt;&gt; s.swapcase()\n"
"'i AM a PrOgRAmmER'\n"
"\n"
""
msgstr ""

#. Tag: para
#, no-c-format
msgid "<emphasis>swapcase()</emphasis> returns the string with case swapped :)"
msgstr ""

#. Tag: screen
#, no-c-format
msgid "\n"
"\n"
"&gt;&gt;&gt; s = \"jdwb 2323bjb\"\n"
"&gt;&gt;&gt; s.isalnum()\n"
"False\n"
"&gt;&gt;&gt; s = \"jdwb2323bjb\"\n"
"&gt;&gt;&gt; s.isalnum()\n"
"True\n"
"\n"
""
msgstr ""

#. Tag: para
#, no-c-format
msgid "Because of the space in the first line <emphasis>isalnum()</emphasis> returned <emphasis>False</emphasis> , it checks for all charecters are alpha numeric or not."
msgstr ""

#. Tag: screen
#, no-c-format
msgid "\n"
"\n"
"&gt;&gt;&gt; s = \"SankarshanSir\"\n"
"&gt;&gt;&gt; s.isalpha()\n"
"True\n"
"&gt;&gt;&gt; s = \"Sankarshan Sir\"\n"
"&gt;&gt;&gt; s.isalpha()\n"
"False\n"
"\n"
""
msgstr ""

#. Tag: para
#, no-c-format
msgid "<emphasis>isalpha()</emphasis> checkes for only alphabets."
msgstr ""

#. Tag: screen
#, no-c-format
msgid "\n"
"\n"
"&gt;&gt;&gt; s = \"1234\"\n"
"&gt;&gt;&gt; s.isdigit() #To check if all the characters are digits or not\n"
"True\n"
"&gt;&gt;&gt; s = \"Fedora9 is coming\"\n"
"&gt;&gt;&gt; s.islower() # To check if all chracters are lower case or not\n"
"False\n"
"&gt;&gt;&gt; s = \"Fedora9 Is Coming\" \n"
"&gt;&gt;&gt; s.istitle() # To check if it is a title or not\n"
"True\n"
"&gt;&gt;&gt; s = \"INDIA\"\n"
"&gt;&gt;&gt; s.isupper() # To check if characters are in upper case or not\n"
"True\n"
"\n"
""
msgstr ""

#. Tag: para
#, no-c-format
msgid "To split any string we have <emphasis>split()</emphasis>. It takes a string as an argument , depending on that it will split the main string and returns a list containing splitted strings."
msgstr ""

#. Tag: screen
#, no-c-format
msgid "\n"
"\n"
"&gt;&gt;&gt; s = \"We all love Python\"\n"
"&gt;&gt;&gt; s.split(\" \")\n"
"['We', 'all', 'love', 'Python']\n"
"&gt;&gt;&gt; x = \"Nishant:is:waiting\"\n"
"&gt;&gt;&gt; x.split(':')\n"
"['Nishant', 'is', 'waiting']\n"
"\n"
""
msgstr ""

#. Tag: para
#, no-c-format
msgid "The opposite method for <emphasis>split()</emphasis> is <emphasis>join()</emphasis>. It takes a list contains strings as input and join them."
msgstr ""

#. Tag: screen
#, no-c-format
msgid "\n"
"\n"
"&gt;&gt;&gt; \"-\".join(\"GNU/Linux is great\".split(\" \"))\n"
"'GNU/Linux-is-great'\n"
"\n"
""
msgstr ""

#. Tag: para
#, no-c-format
msgid "In the above example first we are splitting the string \"GNU/Linux is great\" based on the white space, then joining them with \"-\"."
msgstr ""

#. Tag: title
#, no-c-format
msgid "String the strings"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Strings do have few methods to do striping. The simplest one is <emphasis>strip(chars)</emphasis>. If you provide the chars argument then it will strip any combination of them. By default it strips only whitespace or newline characters."
msgstr ""

#. Tag: screen
#, no-c-format
msgid "\n"
"\n"
"&gt;&gt;&gt; s = \"  abc\n"
" \"\n"
"&gt;&gt;&gt; s.strip()\n"
"'abc'\n"
"\n"
""
msgstr ""

#. Tag: para
#, no-c-format
msgid "You can particularly strip from the left hand or right hand side also using <emphasis>lstrip(chars)</emphasis> or <emphasis>rstrip(chars)</emphasis>."
msgstr ""

#. Tag: screen
#, no-c-format
msgid "\n"
"\n"
"&gt;&gt;&gt; s = \"www.foss.in\"\n"
"&gt;&gt;&gt; s.lstrip(\"cwsd.\")\n"
"'foss.in'\n"
"&gt;&gt;&gt; s.rstrip(\"cnwdi.\")\n"
"'www.foss'\n"
"\n"
""
msgstr ""

#. Tag: title
#, no-c-format
msgid "Finding text"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Stings have some methods which will help you in finding text/substring in a string. Examples are given below:"
msgstr ""

#. Tag: screen
#, no-c-format
msgid "\n"
"\n"
"&gt;&gt;&gt; s.find(\"for\")\n"
"7\n"
"&gt;&gt;&gt; s.find(\"fora\")\n"
"-1\n"
"&gt;&gt;&gt; s.startswith(\"fa\") #To check if the string startswith fa or not\n"
"True\n"
"&gt;&gt;&gt; s.endswith(\"reason\") #\n"
"True\n"
"\n"
""
msgstr ""

#. Tag: para
#, no-c-format
msgid "<emphasis>find()</emphasis> helps to find the first occurrence of the substring given, if not found it returns -1."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Palindrome checking"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Palindrome are the kind of strings which are same from left or right whichever way you read them. Example \"madam\". In this example we will take the word as input from the user and say if it is palindrome or not."
msgstr ""

#. Tag: screen
#, no-c-format
msgid "\n"
"\n"
"#!/usr/bin/env python\n"
"s = raw_input(\"Please enter a string: \")\n"
"z = [x for x in s]\n"
"z.reverse()\n"
"if s == \"\".join(z):\n"
"    print \"The string is a palindrome\"\n"
"else:\n"
"    print \"The string is not a palindrome\"\n"
"\n"
""
msgstr ""

#. Tag: para
#, no-c-format
msgid "The output"
msgstr ""

#. Tag: screen
#, no-c-format
msgid "\n"
"\n"
"[kd@kdlappy book]$ ./palindrome.py\n"
"Please enter a string: madam1\n"
"The string is not a palindrome\n"
"[kd@kdlappy book]$ ./palindrome.py\n"
"Please enter a string: madam\n"
"The string is a palindrome\n"
"\n"
""
msgstr ""

#. Tag: title
#, no-c-format
msgid "Number of words"
msgstr ""

#. Tag: para
#, no-c-format
msgid "In this example we will count the number of words in a given line"
msgstr ""

#. Tag: screen
#, no-c-format
msgid "\n"
"\n"
"#!/usr/bin/env python\n"
"s = raw_input(\"Enter a line: \")\n"
"print \"The number of words in the line are %d\" % (len(s.split(\" \")))\n"
"\n"
""
msgstr ""

#. Tag: screen
#, no-c-format
msgid "\n"
"\n"
"[kd@kdlappy book]$ ./countwords.py\n"
"Enter a line: Sayamindu is a great programmer\n"
"The number of words in the line are 5 \n"
"\n"
""
msgstr ""

