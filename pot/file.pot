# 
# AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: 0\n"
"POT-Creation-Date: 2012-08-13T13:28:38\n"
"PO-Revision-Date: 2012-08-13T13:28:38\n"
"Last-Translator: Automatically generated\n"
"Language-Team: None\n"
"MIME-Version: 1.0\n"
"Content-Type: application/x-publican; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Tag: title
#, no-c-format
msgid "File handling"
msgstr ""

#. Tag: para
#, no-c-format
msgid "A file is some information or data which stays in the computer storage devices. You already know about different kinds of file , like your music files, video files, text files. Python gives you easy ways to manipulate these files. Generally we divide files in two categories, text file and binary file. Text files are simple text where as the binary files contain binary data which is only readable by computer."
msgstr ""

#. Tag: title
#, no-c-format
msgid "File opening"
msgstr ""

#. Tag: para
#, no-c-format
msgid "To open a file we use <emphasis>open()</emphasis> function. It requires two arguments, first the file path or file name, second which mode it should open. Modes are like"
msgstr ""

#. Tag: member
#, no-c-format
msgid "\"r\" -&gt; open read only, you can read the file but can not edit / delete anything inside"
msgstr ""

#. Tag: member
#, no-c-format
msgid "\"w\" -&gt; open with write power, means if the file exists then delete all content and open it to write"
msgstr ""

#. Tag: member
#, no-c-format
msgid "\"a\" -&gt; open in append mode"
msgstr ""

#. Tag: para
#, no-c-format
msgid "The default mode is read only, ie if you do not provide any mode it will open the file as read only. Let us open a file"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid "&gt;&gt;&gt; f = open(\"love.txt\")\n"
"&gt;&gt;&gt; f\n"
"&lt;open file 'love.txt', mode 'r' at 0xb7f2d968&gt;\n"
""
msgstr ""

#. Tag: title
#, no-c-format
msgid "Closing a file"
msgstr ""

#. Tag: para
#, no-c-format
msgid "After opening a file one should always close the opened file. We use method <emphasis>close()</emphasis> for this."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid "&gt;&gt;&gt; f = open(\"love.txt\")\n"
"&gt;&gt;&gt; f\n"
"&lt;open file 'love.txt', mode 'r' at 0xb7f2d968&gt;\n"
"&gt;&gt;&gt; f.close()\n"
""
msgstr ""

#. Tag: title
#, no-c-format
msgid "Important"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Always make sure you *explicitly* close each open file, once its job is done and you have no reason to keep it open. Because"
msgstr ""

#. Tag: para
#, no-c-format
msgid "There is an upper limit to the number of files a program can open. If you exceed that limit, there is no reliable way of recovery, so the program could crash."
msgstr ""

#. Tag: para
#, no-c-format
msgid "Each open file consumes some main-memory for the data-structures associated with it, like file descriptor/handle or file locks etc. So you could essentially end-up wasting lots of memory if you have more files open that are not useful or usable."
msgstr ""

#. Tag: para
#, no-c-format
msgid "Open files always stand a chance of corruption and data loss."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Reading a file"
msgstr ""

#. Tag: para
#, no-c-format
msgid "To read the whole file at once use the <emphasis>read()</emphasis> method."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid "&gt;&gt;&gt; f = open(\"sample.txt\")\n"
"&gt;&gt;&gt; f.read()\n"
"'I love Python\n"
"Pradeepto loves KDE\n"
"Sankarshan loves Openoffice\n"
"'\n"
""
msgstr ""

#. Tag: para
#, no-c-format
msgid "If you call <emphasis>read()</emphasis> again it will return empty string as it already read the whole file. readline() can help you to read one line each time from the file."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid "&gt;&gt;&gt; f = open(\"sample.txt\")\n"
"&gt;&gt;&gt; f.readline()\n"
"'I love Python\n"
"'\n"
"&gt;&gt;&gt; f.readline()\n"
"'Pradeepto loves KDE\n"
"'\n"
""
msgstr ""

#. Tag: para
#, no-c-format
msgid "To read all the all the lines in a list we use <emphasis>readlines()</emphasis> method."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid "&gt;&gt;&gt; f = open(\"sample.txt\")\n"
"&gt;&gt;&gt; f.readlines()\n"
"['I love Python\n"
"', 'Pradeepto loves KDE\n"
"', 'Sankarshan loves Openoffice\n"
"']\n"
""
msgstr ""

#. Tag: para
#, no-c-format
msgid "You can even loop through the lines in a file object."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid "&gt;&gt;&gt; f = open(\"sample.txt\")\n"
"&gt;&gt;&gt; for x in f:\n"
"...     print x,\n"
"...\n"
"I love Python\n"
"Pradeepto loves KDE\n"
"Sankarshan loves Openoffice\n"
""
msgstr ""

#. Tag: para
#, no-c-format
msgid "Let us write a program which will take the file name as the input from the user and show the content of the file in the console."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid "#!/usr/bin/env python\n"
"name = raw_input(\"Enter the file name: \")\n"
"f = open(name)\n"
"print f.read()\n"
"f.close()\n"
""
msgstr ""

#. Tag: para
#, no-c-format
msgid "In the last line you can see that we closed the file object with the help of close() method."
msgstr ""

#. Tag: para
#, no-c-format
msgid "The output"
msgstr ""

#. Tag: screen
#, no-c-format
msgid "$ ./showfile.py\n"
"Enter the filename: sample.txt\n"
"I love Python\n"
"Pradeepto loves KDE\n"
"Sankarshan loves Openoffice\n"
""
msgstr ""

#. Tag: title
#, no-c-format
msgid "Writing in a file"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Let us open a file then we will write some random text into it by using the write() method."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid "&gt;&gt;&gt; f = open(\"ircnicks.txt\", 'w')\n"
"&gt;&gt;&gt; f.write('powerpork\n"
"')\n"
"&gt;&gt;&gt; f.write('indrag\n"
"')\n"
"&gt;&gt;&gt; f.write('mishti\n"
"')\n"
"&gt;&gt;&gt; f.write('sankarshan')\n"
"&gt;&gt;&gt; f.close()\n"
""
msgstr ""

#. Tag: para
#, no-c-format
msgid "Now read the file we just created"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid "&gt;&gt;&gt; f = open('ircnicks.txt')\n"
"&gt;&gt;&gt; s = f.read()\n"
"&gt;&gt;&gt; print s\n"
"powerpork\n"
"indrag\n"
"mishti\n"
"sankarshan\n"
""
msgstr ""

#. Tag: title
#, no-c-format
msgid "copyfile.py"
msgstr ""

#. Tag: para
#, no-c-format
msgid "In this example we will copy a given text file to another file."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid "#!/usr/bin/env python\n"
"import sys\n"
"if len(sys.argv) &lt; 3:\n"
"    print \"Wrong parameter\"\n"
"    print \"./copyfile.py file1 file2\"\n"
"    sys.exit(1)\n"
"f1 = open(sys.argv[1])\n"
"s = f1.read()\n"
"f1.close()\n"
"f2 = open(sys.argv[2], 'w')\n"
"f2.write(s)\n"
"f2.close()\n"
""
msgstr ""

#. Tag: para
#, no-c-format
msgid "This way of reading file is not always a good idea, a file can be very large to read and fit in the memory. It is always better to read a known size of the file and wirte that to the new file."
msgstr ""

#. Tag: para
#, no-c-format
msgid "You can see we used a new module here <emphasis>sys</emphasis>. <emphasis>sys.argv</emphasis> contains all command line parameters. Remember <emphasis>cp</emphasis> command in shell, after <emphasis>cp</emphasis> we type first the file to be copied and then the new file name."
msgstr ""

#. Tag: para
#, no-c-format
msgid "The first value in <emphasis>sys.argv</emphasis> is the name of the command itself."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid "#!/usr/bin/env python\n"
"import sys\n"
"print \"First value\", sys.argv[0]\n"
"print \"All values\"\n"
"for i, x  in enumerate(sys.argv):\n"
"    print i, x\n"
""
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid "$ ./argvtest.py Hi there\n"
"First value ./argvtest.py\n"
"All values\n"
"0 ./argvtest.py\n"
"1 Hi\n"
"2 there\n"
""
msgstr ""

#. Tag: para
#, no-c-format
msgid "Here we used a new function <emphasis>enumerate(iterableobject)</emphasis>, which returns the index number and the value from the iterable object."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Random seeking in a file"
msgstr ""

#. Tag: para
#, no-c-format
msgid "You can also randomly move around inside a file using <emphasis>seek()</emphasis> method. It takes two arguments , offset and whence. To know more about it let us read what python help tells us"
msgstr ""

#. Tag: para
#, no-c-format
msgid "seek(...) seek(offset[, whence]) -&gt; None. Move to new file position. Argument offset is a byte count. Optional argument whence defaults to 0 (offset from start of file, offset should be &gt;= 0); other values are 1 (move relative to current position, positive or negative), and 2 (move relative to end of file, usually negative, although many platforms allow seeking beyond the end of a file). If the file is opened in text mode, only offsets returned by tell() are legal. Use of other offsets causes undefined behavior. Note that not all file objects are speakable."
msgstr ""

#. Tag: para
#, no-c-format
msgid "Let us see one example"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid "&gt;&gt;&gt; f = open('/tmp/tempfile', 'w')\n"
"&gt;&gt;&gt; f.write('0123456789abcdef')\n"
"&gt;&gt;&gt; f.close()\n"
"&gt;&gt;&gt; f = open('/tmp/tempfile')\n"
"&gt;&gt;&gt; f.tell()    #tell us the offset position\n"
"0L\n"
"&gt;&gt;&gt; f.seek(5) # Goto 5th byte\n"
"&gt;&gt;&gt; f.tell()\n"
"5L\n"
"&gt;&gt;&gt; f.read(1) #Read 1 byte\n"
"'5'\n"
"&gt;&gt;&gt; f.seek(-3, 2) # goto 3rd byte from the end\n"
"&gt;&gt;&gt; f.read() #Read till the end of the file\n"
"'def'\n"
""
msgstr ""

#. Tag: title
#, no-c-format
msgid "Count spaces, tabs and new lines in a file"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Let us try to write an application which will count the spaces , tabs, and lines in any given file."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid "\n"
"#!/usr/bin/env python\n"
"\n"
"import os\n"
"import sys\n"
"\n"
"\n"
"def parse_file(path):\n"
"    \"\"\"\n"
"    Parses the text file in the given path and returns space, tab &amp; new line\n"
"    details.\n"
"\n"
"    :arg path: Path of the text file to parse\n"
"\n"
"    :return: A tuple with count of spacaes, tabs and lines. \n"
"    \"\"\"\n"
"    fd = open(path)\n"
"    i = 0\n"
"    spaces = 0\n"
"    tabs = 0\n"
"    for i,line in enumerate(fd):\n"
"        spaces += line.count(' ')\n"
"        tabs += line.count('\\t')\n"
"    #Now close the open file\n"
"    fd.close()\n"
"\n"
"    #Return the result as a tuple\n"
"    return spaces, tabs, i + 1\n"
"\n"
"def main(path):\n"
"    \"\"\"\n"
"    Function which prints counts of spaces, tabs and lines in a file.\n"
"\n"
"    :arg path: Path of the text file to parse\n"
"    :return: True if the file exits or False.\n"
"    \"\"\"\n"
"    if os.path.exists(path):\n"
"        spaces, tabs, lines = parse_file(path)\n"
"        print \"Spaces %d. tabs %d. lines %d\" % (spaces, tabs, lines)\n"
"        return True\n"
"    else:\n"
"        return False\n"
"\n"
"\n"
"if __name__ == '__main__':\n"
"    if len(sys.argv) &gt; 1:\n"
"        main(sys.argv[1])\n"
"    else:\n"
"        sys.exit(-1)\n"
"    sys.exit(0)\n"
"\n"
""
msgstr ""

#. Tag: para
#, no-c-format
msgid "You can see that we have two functions in the program , <emphasis>main</emphasis> and <emphasis>parse_file</emphasis> where the second one actually parses the file and returns the result and we print the result in <emphasis>main</emphasis> function. By splitting up the code in smaller units (functions) helps us to organize the codebase and also it will be easier to write test cases for the functions."
msgstr ""

