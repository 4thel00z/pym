# 
# AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: 0\n"
"POT-Creation-Date: 2012-08-13T13:28:38\n"
"PO-Revision-Date: 2012-08-13T13:28:38\n"
"Last-Translator: Automatically generated\n"
"Language-Team: None\n"
"MIME-Version: 1.0\n"
"Content-Type: application/x-publican; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Tag: title
#, no-c-format
msgid "Modules"
msgstr ""

#. Tag: para
#, no-c-format
msgid "In this chapter we are going to learn about Python modules."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Introduction"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Still now when ever we wrote code in the python interpreter, after we came out of it, the code was lost. But in when one writes a larger program, people breaks their codes into different files and reuse then as required. In python we do this by <emphasis>modules</emphasis>. Modules are nothing files with Python definitions and statements. The module name is same as the file name without the .py extension."
msgstr ""

#. Tag: para
#, no-c-format
msgid "You can find the name of the module by accessing the <emphasis>__name__</emphasis> variable. It is a global variable."
msgstr ""

#. Tag: para
#, no-c-format
msgid "Now we are going to see how modules work. Create a file called bars.py. Content of the file is given bellow."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid "\n"
"\"\"\"\n"
"Bars Module\n"
"============\n"
"\n"
"This is an example module with provide different ways to print bars.\n"
"\n"
"\"\"\"\n"
"\n"
"def starbar(num):\n"
"    \"\"\"\n"
"    Prints a bar with *\n"
"\n"
"    :arg num: Length of the bar\n"
"\n"
"    \"\"\"\n"
"    print '*' * num\n"
"\n"
"def hashbar(num):\n"
"    \"\"\"\n"
"    Prints a bar with #\n"
"\n"
"    :arg num: Length of the bar\n"
"\n"
"    \"\"\"\n"
"    print '#' * num\n"
"\n"
"def simplebar(num):\n"
"    \"\"\"\n"
"    Prints a bar with -\n"
"\n"
"    :arg num: Length of the bar\n"
"    \n"
"    \"\"\"\n"
"    print '-' * num\n"
"\n"
"\n"
""
msgstr ""

#. Tag: para
#, no-c-format
msgid "Now we are going to start the python interpreter and import our module."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid "\n"
"&gt;&gt;&gt; import bars\n"
"&gt;&gt;&gt;\n"
"\n"
""
msgstr ""

#. Tag: para
#, no-c-format
msgid "This will import the module bars. We have to use the module name to access functions inside the module."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid "\n"
"&gt;&gt;&gt; bars.hashbar(10)\n"
"##########\n"
"&gt;&gt;&gt; bars.simplebar(10)\n"
"----------\n"
"&gt;&gt;&gt; bars.starbar(10)\n"
"**********\n"
"\n"
""
msgstr ""

#. Tag: title
#, no-c-format
msgid "Importing modules"
msgstr ""

#. Tag: para
#, no-c-format
msgid "There are different ways to import modules. We already saw one way to do this. You can even import selected functions from modules. To do so:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid "\n"
"&gt;&gt;&gt; from bars import simplebar, starbar\n"
"&gt;&gt;&gt; simplebar(20)\n"
"--------------------\n"
"\n"
""
msgstr ""

#. Tag: title
#, no-c-format
msgid "Default modules"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Now your Python installation comes with different modules installed, you can use them as required and install new modules for any other special purposes. In the following few examples we are going to see many examples on the same."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid "\n"
"&gt;&gt;&gt; help()\n"
"\n"
"Welcome to Python 2.6!  This is the online help utility.\n"
"\n"
"If this is your first time using Python, you should definitely check out\n"
"the tutorial on the Internet at http://docs.python.org/tutorial/.\n"
"\n"
"Enter the name of any module, keyword, or topic to get help on writing\n"
"Python programs and using Python modules.  To quit this help utility and\n"
"return to the interpreter, just type \"quit\".\n"
"\n"
"To get a list of available modules, keywords, or topics, type \"modules\",\n"
"\"keywords\", or \"topics\".  Each module also comes with a one-line summary\n"
"of what it does; to list the modules whose summaries contain a given word\n"
"such as \"spam\", type \"modules spam\".\n"
"\n"
"help&gt; modules\n"
"\n"
"\n"
""
msgstr ""

#. Tag: para
#, no-c-format
msgid "The above example shows how to get the list of all installed modules in your system. I am not pasting them here as it is a big list in my system :)"
msgstr ""

#. Tag: title
#, no-c-format
msgid "Submodules"
msgstr ""

#. Tag: para
#, no-c-format
msgid "We can many submodules inside a module. A directory with a <emphasis>__init__.py</emphasis> can also be used a module and all <emphasis>.py</emphasis> files inside it become submodules."
msgstr ""

#. Tag: screen
#, no-c-format
msgid "\n"
"$ tree mymodule\n"
"mymodule\n"
"|-- bars.py\n"
"|-- __init__.py\n"
"`-- utils.py\n"
"\n"
""
msgstr ""

#. Tag: para
#, no-c-format
msgid "In this example <emphasis>mymodule</emphasis> is the module name and <emphasis>bars</emphasis> and <emphasis>utils</emphasis> are two submodules in it."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Module os"
msgstr ""

#. Tag: para
#, no-c-format
msgid "os module provides operating system dependent functionality. You can import it using the following import statement."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid "\n"
"&gt;&gt;&gt; import os\n"
"\n"
"\n"
""
msgstr ""

#. Tag: para
#, no-c-format
msgid "<emphasis>getuid()</emphasis> function returns the current process's effective user's id."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid "\n"
"\n"
"&gt;&gt;&gt; os.getuid()\n"
"500\n"
"\n"
"\n"
""
msgstr ""

#. Tag: para
#, no-c-format
msgid "<emphasis>getpid()</emphasis> returns the current process's id. <emphasis>getppid()</emphasis> returns the parent process's id."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid "\n"
"\n"
"&gt;&gt;&gt; os.getpid()\n"
"16150\n"
"&gt;&gt;&gt; os.getppid()\n"
"14847\n"
"\n"
"\n"
"\n"
""
msgstr ""

#. Tag: para
#, no-c-format
msgid "<emphasis>uname()</emphasis> returns different information identifying the operating system, in Linux it returns details you can get from the uname command. The returned object is a tuple, <emphasis>(sysname, nodename, release, version, machine)</emphasis>"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid "\n"
"\n"
"&gt;&gt;&gt; os.uname()\n"
"('Linux', 'd80', '2.6.34.7-56.fc13.i686.PAE', '#1 SMP Wed Sep 15 03:27:15 UTC 2010', 'i686')\n"
"\n"
"\n"
""
msgstr ""

#. Tag: para
#, no-c-format
msgid "<emphasis>getcwd()</emphasis>returns the current working directory. <emphasis>chdir(path)</emphasis> changes the current working directory to path. In the example we first see the current directory which is my home directory and change the current directory to <emphasis>/tmp</emphasis> and then again checking the current directory."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid "\n"
"&gt;&gt;&gt; os.getcwd()\n"
"'/home/kushal'\n"
"&gt;&gt;&gt; os.chdir('/tmp')\n"
"&gt;&gt;&gt; os.getcwd()\n"
"'/tmp'\n"
"\n"
""
msgstr ""

