# 
# AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: 0\n"
"POT-Creation-Date: 2012-08-13T13:28:38\n"
"PO-Revision-Date: 2012-08-13T13:28:38\n"
"Last-Translator: Automatically generated\n"
"Language-Team: None\n"
"MIME-Version: 1.0\n"
"Content-Type: application/x-publican; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Tag: title
#, no-c-format
msgid "Class"
msgstr ""

#. Tag: para
#, no-c-format
msgid "What is a <emphasis>class</emphasis>? In our daily life, we come across many objects which are similar kind or in words which are basically same. For example we can think about a car. There are different brands , color, look, style, parts, but basically they all are cars. All them of are made by different companies but with similar kind of components."
msgstr ""

#. Tag: para
#, no-c-format
msgid "We can say all of them are different instances of the <emphasis>class</emphasis> car. They all belongs to the car class. Every instance is known as an <emphasis>object</emphasis> in computer world. A <emphasis>class</emphasis> can contain variables or methods to access those variables.In Python everything is an <emphasis>object</emphasis>. Even if you create an integer, that is an object of the <emphasis>Integer class</emphasis>. In C++ this is different."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Your first class"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Before writing your first class, you should know the syntax. We define a class in the following way.."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid "class nameoftheclass:\n"
"    statement1\n"
"    statement2\n"
"    statement3\n"
"\n"
""
msgstr ""

#. Tag: para
#, no-c-format
msgid "in the statements you can write any python statement, you can define functions (which we call methods of a class)."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid "&gt;&gt;&gt; class MyClass:\n"
"...     a = 90\n"
"...     b = 88\n"
"...\n"
"&gt;&gt;&gt; p = MyClass()\n"
"&gt;&gt;&gt; p\n"
"&lt;__main__.MyClass instance at 0xb7c8aa6c&gt;\n"
"\n"
""
msgstr ""

#. Tag: para
#, no-c-format
msgid "In the above example you can see first we are declaring a class called MyClass, writing some random statements inside that class. After the class definition, we are creating an <emphasis>object</emphasis> p of the <emphasis>class</emphasis> MyClass.If you do a dir on that..."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid "&gt;&gt;&gt; dir(p)\n"
"['__doc__', '__module__', 'a', 'b']\n"
"\n"
""
msgstr ""

#. Tag: para
#, no-c-format
msgid "You can see the variables <emphasis>a</emphasis> and <emphasis>b</emphasis> inside it."
msgstr ""

#. Tag: title
#, no-c-format
msgid "__init__ method"
msgstr ""

#. Tag: para
#, no-c-format
msgid "__init__ is a special method in python classes, it is the constructor method for a class. In the following example you can see how to use it"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid "class Student(object):\n"
"    \"\"\"\n"
"    Returns a ```Student``` object with the given name, branch and year. \n"
"    \n"
"    \"\"\"\n"
"    def __init__(self, name, branch, year):\n"
"            self.name = name\n"
"            self.branch = branch\n"
"            self.year = year\n"
"            print \"A student object is created\"\n"
"\n"
"    def set_name(self, name):\n"
"        \"\"\"\n"
"        Sets the name of the student.\n"
"\n"
"        :arg name: new name ofthe student.\n"
"        \n"
"        \"\"\"\n"
"        self.name = name\n"
"\n"
"    def get_name(self):\n"
"        \"\"\"\n"
"        Returns the name of the student.\n"
"        \n"
"        :return: a string contain the student's name\n"
"\n"
"        \"\"\"\n"
"        return self.name\n"
"\n"
""
msgstr ""

#. Tag: para
#, no-c-format
msgid "__init__ is called when ever an object of the class is constructed.That means when ever we will create a student object we will see the message \"Creating a new student\" in the prompt. You can see the first argument to the method is <emphasis>self</emphasis>. It is a special variable which points to the current object (like `this` in C++). The object is passed implicitly to every method available in it , but we have to get it explicitly in every method while writing the methods. Example shown below."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid "&gt;&gt;&gt; std1 = Student()\n"
"Traceback (most recent call last):\n"
"  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n"
"TypeError: __init__() takes exactly 4 arguments (1 given)\n"
"&gt;&gt;&gt; std1 = Student('Kushal','CSE','2005')\n"
"A student object is created\n"
"\n"
""
msgstr ""

#. Tag: para
#, no-c-format
msgid "In this example at first we tried to create a Student object with passing any argument and python interpreter complained that it takes exactly 4 arguments but received only one (self). Then we created an object with proper argument values and from the message printed, one can easily understand that <emphasis>__init__ </emphasis> method was called as the constructor method."
msgstr ""

#. Tag: para
#, no-c-format
msgid "Now we are going to call <emphasis>getName()</emphasis> and <emphasis>setName()</emphasis> methods."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid "&gt;&gt;&gt; std1.get_name()\n"
"'Kushal'\n"
"&gt;&gt;&gt; std1.set_name()\n"
"Traceback (most recent call last):\n"
"  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n"
"TypeError: set_name() takes exactly 2 arguments (1 given)\n"
"&gt;&gt;&gt; std1.set_name('Shreyank Gupta')\n"
"&gt;&gt;&gt; std1.get_name()\n"
"'Shreyank Gupta'\n"
"\n"
""
msgstr ""

#. Tag: para
#, no-c-format
msgid "First we called getName on the object we created, then tried to call setName without any arguments and we got an error. Next we again called setName with argument 'Shreyank Gupta'. Now calling getName gives 'Shreyank Gupta' as the output."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Inheritance"
msgstr ""

#. Tag: para
#, no-c-format
msgid "In general we human beings always know about inheritance. In programming it is almost the same. When a class inherits another class it inherits all features(like variables and methods) of the parent class. This helps in reusing codes."
msgstr ""

#. Tag: para
#, no-c-format
msgid "In the next example we first create a class called Person and create two sub-classes Student and Teacher. As both of the classes are inherited from Person class they will have all methods of Person and will have new methods and variables for their own purpose."
msgstr ""

#. Tag: title
#, no-c-format
msgid "student_teacher.py"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid "#!/usr/bin/env python\n"
"\n"
"class Person(object):\n"
"    \"\"\"\n"
"    Returns a ```Person``` object with given name.\n"
"\n"
"    \"\"\"\n"
"    def __init__(self,name):\n"
"        self.name = name\n"
"\n"
"    def get_details(self):\n"
"        \"Returns a string containing name of the person\"\n"
"        return self.name\n"
"\n"
"\n"
"class Student(Person):\n"
"    \"\"\"\n"
"    Returns a ```Student``` object, takes 3 arguments, name, branch, year.\n"
"    \n"
"    \"\"\"\n"
"    def __init__(self,name,branch,year):\n"
"        Person.__init__(self,name)\n"
"        self.branch = branch\n"
"        self.year = year\n"
"\n"
"    def get_details(self):\n"
"        \"Returns a string containing student's details.\"\n"
"        return \"%s studies %s and is in %s year.\" % (self.name, self.branch, self.year)\n"
"\n"
"\n"
"class Teacher(Person):\n"
"    \"\"\"\n"
"    Returns a ```Teacher``` object, takes a list of strings (list of papers) as\n"
"    argument.\n"
"    \"\"\"    \n"
"    def __init__(self, name, papers):\n"
"        Person.__init__(self, name)\n"
"        self.papers = papers\n"
"\n"
"    def get_details(self):\n"
"        return \"%s teaches %s\" % (self.name, ','.join(self.papers))\n"
"\n"
"\n"
"person1 = Person('Sachin')\n"
"student1 = Student('Kushal', 'CSE', 2005)\n"
"teacher1 = Teacher('Prashad', ['C', 'C++'])\n"
"\n"
"print person1.get_details()\n"
"print student1.get_details()\n"
"print teacher1.get_details()\n"
"\n"
"\n"
""
msgstr ""

#. Tag: para
#, no-c-format
msgid "The output:"
msgstr ""

#. Tag: screen
#, no-c-format
msgid "$ ./student_teacher.py \n"
"Sachin\n"
"Kushal studies CSE and is in 2005 year.\n"
"Prashad teaches C,C++\n"
"\n"
"\n"
""
msgstr ""

#. Tag: para
#, no-c-format
msgid "In this example you can see how we called the __init__ method of the class Person in both Student and Teacher classes' __init__ method. We also reimplemented <emphasis>get_details()</emphasis> method of Person class in both Student and Teacher class. So, when we are calling <emphasis>get_details()</emphasis> method on the teacher1 object it returns based on the object itself (which is of teacher class) and when we call <emphasis>get_details()</emphasis> on the student1 or person1 object it returns based on <emphasis>get_details()</emphasis> method implemented in it's own class."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Multiple Inheritance"
msgstr ""

#. Tag: para
#, no-c-format
msgid "One class can inherit more than one classes. It gets access to all methods and variables of the parent classes. The general syntax is:"
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid "class MyClass(Parentclass1, Parentclass2,...):\n"
"    def __init__(self):\n"
"        Parentclass1.__init__(self)\n"
"        Parentclass2.__init__(self)\n"
"        ...\n"
"        ...\n"
"\n"
""
msgstr ""

#. Tag: title
#, no-c-format
msgid "Deleting an object"
msgstr ""

#. Tag: para
#, no-c-format
msgid "As we already know how to create an object , now we are going to see how to delete an python object. We use <emphasis>del</emphasis> for this."
msgstr ""

#. Tag: programlisting
#, no-c-format
msgid "&gt;&gt;&gt; s = \"I love you\"\n"
"&gt;&gt;&gt; del s\n"
"&gt;&gt;&gt; s\n"
"Traceback (most recent call last):\n"
"  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n"
"NameError: name 's' is not defined\n"
"\n"
""
msgstr ""

#. Tag: para
#, no-c-format
msgid "<emphasis>del</emphasis> actually decreases reference count by one. When the reference count of an object becomes zero the garbage collector will delete that object."
msgstr ""

