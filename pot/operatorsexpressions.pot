# 
# AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: 0\n"
"POT-Creation-Date: 2011-11-05T11:20:40\n"
"PO-Revision-Date: 2011-11-05T11:20:40\n"
"Last-Translator: Automatically generated\n"
"Language-Team: None\n"
"MIME-Version: 1.0\n"
"Content-Type: application/x-publican; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Tag: title
#, no-c-format
msgid "Operators and expressions"
msgstr ""

#. Tag: para
#, no-c-format
msgid "In python most of the lines you will write will be expressions. Expressions are made of operators and operands. An expression is like <emphasis>2 + 3</emphasis> ."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Operators"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Operators are the symbols which tells the python interpreter to do some mathematical or logical operation. Few basic examples of mathematical operators are given below:"
msgstr ""

#. Tag: screen
#, no-c-format
msgid "\n"
"\n"
"&gt;&gt;&gt; 2 + 3\n"
"5\n"
"&gt;&gt;&gt; 23 - 3\n"
"20\n"
"&gt;&gt;&gt; 22.0 / 12\n"
"1.8333333333333333\n"
"\n"
""
msgstr ""

#. Tag: para
#, no-c-format
msgid "To get floating result you need to the division using any of operand as floating number. To do modulo operation use % operator"
msgstr ""

#. Tag: screen
#, no-c-format
msgid "\n"
"\n"
"&gt;&gt;&gt; 14 % 3\n"
"2\n"
"\n"
""
msgstr ""

#. Tag: title
#, no-c-format
msgid "Example of integer arithmetic"
msgstr ""

#. Tag: para
#, no-c-format
msgid "The code"
msgstr ""

#. Tag: screen
#, no-c-format
msgid "\n"
"\n"
"#!/usr/bin/env python\n"
"days = int(raw_input(\"Enter days: \"))\n"
"months = days / 30\n"
"days = days % 30\n"
"print \"Months = %d Days = %d\" % (months, days)\n"
"\n"
""
msgstr ""

#. Tag: para
#, no-c-format
msgid "The output"
msgstr ""

#. Tag: screen
#, no-c-format
msgid "\n"
"\n"
"[kd@kdlappy book]$ ./integer.py\n"
"Enter days: 265\n"
"Months = 8 Days = 25\n"
"\n"
""
msgstr ""

#. Tag: para
#, no-c-format
msgid "In the first line I am taking the input of days, then getting the months and days and at last printing them. You can do it in a easy way"
msgstr ""

#. Tag: screen
#, no-c-format
msgid "\n"
"\n"
"#!/usr/bin/env python\n"
"days = int(raw_input(\"Enter days: \"))\n"
"print \"Months = %d Days = %d\" % (divmod(days, 30))\n"
"\n"
""
msgstr ""

#. Tag: para
#, no-c-format
msgid "The divmod(num1, num2) function returns two values , first is the division of num1 and num2 and in second the modulo of num1 and num2."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Relational Operators"
msgstr ""

#. Tag: para
#, no-c-format
msgid "You can use the following operators as relational operators"
msgstr ""

#. Tag: segtitle
#, no-c-format
msgid "Operator"
msgstr ""

#. Tag: segtitle
#, no-c-format
msgid "Meaning"
msgstr ""

#. Tag: seg
#, no-c-format
msgid "&lt;"
msgstr ""

#. Tag: seg
#, no-c-format
msgid "Is less than"
msgstr ""

#. Tag: seg
#, no-c-format
msgid "&lt;="
msgstr ""

#. Tag: seg
#, no-c-format
msgid "Is less than or equal to"
msgstr ""

#. Tag: seg
#, no-c-format
msgid "&gt;"
msgstr ""

#. Tag: seg
#, no-c-format
msgid "Is greater than"
msgstr ""

#. Tag: seg
#, no-c-format
msgid "&gt;="
msgstr ""

#. Tag: seg
#, no-c-format
msgid "Is greater than or equal to"
msgstr ""

#. Tag: seg
#, no-c-format
msgid "=="
msgstr ""

#. Tag: seg
#, no-c-format
msgid "Is equal to"
msgstr ""

#. Tag: seg
#, no-c-format
msgid "!="
msgstr ""

#. Tag: seg
#, no-c-format
msgid "Is not equal to"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Some examples"
msgstr ""

#. Tag: screen
#, no-c-format
msgid "\n"
"\n"
"&gt;&gt;&gt; 1 &lt; 2\n"
"True\n"
"&gt;&gt;&gt; 3 &gt; 34\n"
"False\n"
"&gt;&gt;&gt; 23 == 45\n"
"False\n"
"&gt;&gt;&gt; 34 != 323\n"
"True\n"
"\n"
""
msgstr ""

#. Tag: para
#, no-c-format
msgid "<emphasis>//</emphasis> operator gives the floor division result"
msgstr ""

#. Tag: screen
#, no-c-format
msgid "\n"
"\n"
"&gt;&gt;&gt; 4.0 // 3\n"
"1.0\n"
"&gt;&gt;&gt; 4.0 / 3\n"
"1.3333333333333333\n"
"\n"
""
msgstr ""

#. Tag: title
#, no-c-format
msgid "Logical Operators"
msgstr ""

#. Tag: para
#, no-c-format
msgid "To do logical AND , OR we use <emphasis>and</emphasis> ,<emphasis> or</emphasis> keywords. <emphasis>x and y</emphasis> returns <emphasis>False</emphasis> if <emphasis>x</emphasis> is <emphasis>False</emphasis> else it returns evaluation of <emphasis>y</emphasis>. If <emphasis>x</emphasis> is <emphasis>True</emphasis>, it returns <emphasis>True</emphasis>."
msgstr ""

#. Tag: screen
#, no-c-format
msgid "\n"
"\n"
"&gt;&gt;&gt; 1 and 4\n"
"4\n"
"&gt;&gt;&gt; 1 or 4\n"
"1\n"
"&gt;&gt;&gt; -1 or 4\n"
"-1\n"
"&gt;&gt;&gt; 0 or 4\n"
"4\n"
"\n"
""
msgstr ""

#. Tag: title
#, no-c-format
msgid "Shorthand Operator"
msgstr ""

#. Tag: para
#, no-c-format
msgid "<emphasis>x op = expression</emphasis> is the syntax for shorthand operators. It will be evaluated like <emphasis>x = x op expression</emphasis> , Few examples are"
msgstr ""

#. Tag: screen
#, no-c-format
msgid "\n"
"\n"
"&gt;&gt;&gt; a = 12\n"
"&gt;&gt;&gt; a += 13\n"
"&gt;&gt;&gt; a\n"
"25\n"
"&gt;&gt;&gt; a /= 3\n"
"&gt;&gt;&gt; a\n"
"8\n"
"&gt;&gt;&gt; a += (26* 32)\n"
"&gt;&gt;&gt; a\n"
"840\n"
"\n"
""
msgstr ""

#. Tag: para
#, no-c-format
msgid "shorthand.py example"
msgstr ""

#. Tag: screen
#, no-c-format
msgid "\n"
"\n"
"#!/usr/bin/env python\n"
"N = 100\n"
"a = 2\n"
"while a &lt; N:\n"
"    print \"%d\" % a\n"
"    a *= a\n"
"\n"
""
msgstr ""

#. Tag: screen
#, no-c-format
msgid "\n"
"\n"
"[kd@kdlappy book]$ ./shorthand.py\n"
"2\n"
"4\n"
"16\n"
"\n"
""
msgstr ""

#. Tag: title
#, no-c-format
msgid "Expressions"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Generally while writing expressions we put spaces before and after every operator so that the code becomes clearer to read, like"
msgstr ""

#. Tag: screen
#, no-c-format
msgid "\n"
"\n"
"a = 234 * (45 - 56.0 / 34)\n"
"\n"
""
msgstr ""

#. Tag: para
#, no-c-format
msgid "One example code used to show expressions"
msgstr ""

#. Tag: screen
#, no-c-format
msgid "\n"
"\n"
"#!/usr/bin/env python\n"
"a = 9\n"
"b = 12\n"
"c = 3\n"
"x = a -b / 3 + c * 2 -1\n"
"y = a -b / (3 + c) * (2 -1)\n"
"z = a - (b / (3 +c) * 2) -1\n"
"print \"X = \", x\n"
"print \"Y = \", y\n"
"print \"Z = \", z\n"
"\n"
""
msgstr ""

#. Tag: screen
#, no-c-format
msgid "\n"
"\n"
"[kd@kdlappy book]$ ./evaluationexp.py\n"
"X =  10\n"
"Y =  7\n"
"Z =  4\n"
"\n"
""
msgstr ""

#. Tag: para
#, no-c-format
msgid "At first <emphasis>x</emphasis> is being calculated. The steps are like this"
msgstr ""

#. Tag: screen
#, no-c-format
msgid "\n"
"\n"
"9 - 12 / 3 + 3 * 2 -1\n"
"9 - 4 + 3 * 2 - 1\n"
"9 - 4 + 6 - 1\n"
"5 + 6 -1\n"
"11 - 1\n"
"10\n"
"\n"
""
msgstr ""

#. Tag: para
#, no-c-format
msgid "Now for <emphasis>y</emphasis> and <emphasis>z</emphasis> we have parentheses, so the expressions evaluated in different way. Do the calculation yourself to check them."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Type Conversions"
msgstr ""

#. Tag: para
#, no-c-format
msgid "We have to do the type conversions manually. Like"
msgstr ""

#. Tag: screen
#, no-c-format
msgid "\n"
"\n"
"float(string) -&gt; float value\n"
"int(string) -&gt; integer value\n"
"str(integer) or str(float) -&gt; string representation \n"
"&gt;&gt;&gt; a = 8.126768\n"
"&gt;&gt;&gt; str(a)\n"
"'8.126768'\n"
"\n"
""
msgstr ""

#. Tag: title
#, no-c-format
msgid "evaluateequ.py"
msgstr ""

#. Tag: para
#, no-c-format
msgid "This is a program to evaluate 1/x+1/(x+1)+1/(x+2)+ ... +1/n series upto n, in our case x = 1 and n =10"
msgstr ""

#. Tag: screen
#, no-c-format
msgid "\n"
"\n"
"#!/usr/bin/env python\n"
"sum = 0.0\n"
"for i in range(1, 11):\n"
"    sum += 1.0 / i\n"
"    print \"%2d %6.4f\" % (i , sum)\n"
"\n"
""
msgstr ""

#. Tag: screen
#, no-c-format
msgid "\n"
"\n"
"[kd@kdlappy book]$ ./evaluateequ.py\n"
" 1 1.0000\n"
" 2 1.5000\n"
" 3 1.8333\n"
" 4 2.0833\n"
" 5 2.2833\n"
" 6 2.4500\n"
" 7 2.5929\n"
" 8 2.7179\n"
" 9 2.8290\n"
"10 2.9290\n"
"\n"
""
msgstr ""

#. Tag: para
#, no-c-format
msgid "In the line <emphasis>sum += 1.0 / i</emphasis> what is actually happening is <emphasis>sum = sum + 1.0 / i</emphasis>."
msgstr ""

#. Tag: title
#, no-c-format
msgid "quadraticequation.py"
msgstr ""

#. Tag: para
#, no-c-format
msgid "This is a program to evaluate the quadratic equation"
msgstr ""

#. Tag: screen
#, no-c-format
msgid "\n"
"\n"
"#!/usr/bin/env python\n"
"import math\n"
"a = int(raw_input(\"Enter value of a: \"))\n"
"b = int(raw_input(\"Enter value of b: \"))\n"
"c = int(raw_input(\"Enter value of c: \"))\n"
"d = b * b - 4 * a * c\n"
"if d &lt; 0:\n"
"    print \"ROOTS are imaginary\"\n"
"else:\n"
"    root1 = (-b + math.sqrt(d)) / (2.0 * a)\n"
"    root2 = (-b - math.sqrt(d)) / (2.0 * a)\n"
"print \"Root 1 = \", root1\n"
"print \"Root 2 = \", root2\n"
"\n"
""
msgstr ""

#. Tag: title
#, no-c-format
msgid "salesmansalary.py"
msgstr ""

#. Tag: para
#, no-c-format
msgid "In this example we are going to calculate the salary of a camera salesman. His basic salary is 1500, for every camera he will sell he will get 200 and the commission on the month's sale is 2 %. The input will be number of cameras sold and total price of the cameras."
msgstr ""

#. Tag: screen
#, no-c-format
msgid "\n"
"\n"
"#!/usr/bin/env python\n"
"basic_salary = 1500\n"
"bonus_rate = 200\n"
"commision_rate = 0.02\n"
"numberofcamera = int(raw_input(\"Enter the number of inputs sold: \"))\n"
"price = float(raw_input(\"Enter the total prices: \"))\n"
"bonus = (bonus_rate * numberofcamera)\n"
"commision = (commision_rate * numberofcamera * price)\n"
"\n"
"print \"Bonus        = %6.2f\" % bonus\n"
"print \"Commision    = %6.2f\" % commision\n"
"print \"Gross salary = %6.2f\" % ( basic_salary + bonus + commision)\n"
"\n"
""
msgstr ""

#. Tag: screen
#, no-c-format
msgid "\n"
"\n"
"[kd@kdlappy book]$ ./salesmansalary.py\n"
"Enter the number of inputs sold: 5\n"
"Enter the total prices: 20450\n"
"Bonus        = 1000.00\n"
"Commision    = 2045.00\n"
"Gross salary = 4545.00\n"
"\n"
""
msgstr ""

