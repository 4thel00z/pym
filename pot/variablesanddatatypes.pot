# 
# AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: 0\n"
"POT-Creation-Date: 2010-09-27T11:50:13\n"
"PO-Revision-Date: 2010-09-27T11:50:13\n"
"Last-Translator: Automatically generated\n"
"Language-Team: None\n"
"MIME-Version: 1.0\n"
"Content-Type: application/x-publican; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Tag: title
#, no-c-format
msgid "Variables and Datatypes"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Every programming language is having own grammar rules just like the other languages we speak."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Keywords and Identifiers"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Python codes can be divided into identifiers. Identifiers (also referred to as names) are described by the following lexical definitions:"
msgstr ""

#. Tag: screen
#, no-c-format
msgid "\n"
"\n"
"identifier ::= (letter|&#34;_&#34;) (letter | digit | &#34;_&#34;)* \n"
"letter ::= lowercase | uppercase \n"
"lowercase ::= &#34;a&#34;...&#34;z&#34; \n"
"uppercase ::= &#34;A&#34;...&#34;Z&#34; \n"
"digit ::= &#34;0&#34;...&#34;9&#34;\n"
"\n"
""
msgstr ""

#. Tag: para
#, no-c-format
msgid "This means <emphasis>_abcd</emphasis> is a valid identifier where as <emphasis>1sd</emphasis> is not. The following identifiers are used as reserved words, or keywords of the language, and cannot be used as ordinary identifiers. They must be spelled exactly as written here:"
msgstr ""

#. Tag: screen
#, no-c-format
msgid "\n"
"\n"
"and       del      from      not   while \n"
"as        elif     global    or    with \n"
"assert    else     if        pass  yield \n"
"break     except   import    print \n"
"class     exec     in        raise \n"
"continue  finally  is        return \n"
"def       for      lambda    try\n"
"\n"
""
msgstr ""

#. Tag: para
#, no-c-format
msgid "In Python we don&#39;t specify what kind of data we are going to put in a variable. So you can directly write abc = 1 and abc will become an integer datatype. If you write abc = 1.0 abc will become of floating type. Here is a small program to add two given numbers"
msgstr ""

#. Tag: screen
#, no-c-format
msgid "\n"
"\n"
"&#62;&#62;&#62; a = 13 \n"
"&#62;&#62;&#62; b = 23\n"
"&#62;&#62;&#62; a + b \n"
"36\n"
"\n"
""
msgstr ""

#. Tag: para
#, no-c-format
msgid "From the above example you can understand that to declare a variable in python , what you need is just to type the name and the value. Python can also manipulate strings They can be enclosed in single quotes or double quotes like"
msgstr ""

#. Tag: screen
#, no-c-format
msgid "\n"
"\n"
"&#62;&#62;&#62; &#39;India&#39;\n"
"&#39;India&#39; \n"
"&#62;&#62;&#62; &#39;India\\&#39;s best&#39; \n"
"&#34;India&#39;s best&#34; \n"
"&#62;&#62;&#62; &#34;Hello World!&#34; \n"
"&#39;Hello World!&#39;\n"
"\n"
""
msgstr ""

#. Tag: title
#, no-c-format
msgid "Reading input from the Keyboard"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Generally the real life python codes do not need to read input from the keyboard. In python we use raw_input function to do input. <emphasis>raw_input(&#34;String to show&#34;)</emphasis> , this will return a string as output. Let us write a program to read a number from the keyboard and check if it is less than 100 or not. Name of the program is testhundred.py"
msgstr ""

#. Tag: screen
#, no-c-format
msgid "\n"
"\n"
"#!/usr/bin/env python   \n"
"number = int(raw_input(&#34;Enter an integer: &#34;))\n"
"if number &#60; 100:   \n"
"    print &#34;Your number is smaller than 100&#34;   \n"
"else:   \n"
"    print &#34;Your number is greater than 100&#34; \n"
"\n"
""
msgstr ""

#. Tag: para
#, no-c-format
msgid "The output"
msgstr ""

#. Tag: screen
#, no-c-format
msgid "\n"
"\n"
"[kd@kdlappy book]$ ./testhundred.py \n"
"Enter an integer: 13 \n"
"Your number is smaller than 100 \n"
"[kd@kdlappy book]$ ./testhundred.py \n"
"Enter an integer: 123 \n"
"Your number is greater than 100\n"
"\n"
""
msgstr ""

#. Tag: para
#, no-c-format
msgid "In the next program we are going to calculate investments."
msgstr ""

#. Tag: screen
#, no-c-format
msgid "\n"
"\n"
"#!/usr/bin/env python \n"
"amount = float(raw_input(&#34;Enter amount: &#34;)) \n"
"inrate = float(raw_input(&#34;Enter Interest rate: &#34;)) \n"
"period = int(raw_input(&#34;Enter period: &#34;)) \n"
"value = 0 \n"
"year = 1 \n"
"while year &#60;= period:\n"
"    value = amount + (inrate * amount)\n"
"    print &#34;Year %d Rs. %.2f&#34; %(year, value)\n"
"    amount = value\n"
"    year = year + 1 \n"
"\n"
""
msgstr ""

#. Tag: screen
#, no-c-format
msgid "\n"
"\n"
"[kd@kdlappy book]$ ./investment.py\n"
"Enter amount: 10000\n"
"Enter Interest rate: 0.14\n"
"Enter period: 5\n"
"Year 1 Rs. 11400.00\n"
"Year 2 Rs. 12996.00\n"
"Year 3 Rs. 14815.44\n"
"Year 4 Rs. 16889.60\n"
"Year 5 Rs. 19254.15\n"
"\n"
""
msgstr ""

#. Tag: title
#, no-c-format
msgid "Some Examples"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Some examples of variables and datatypes:"
msgstr ""

#. Tag: title
#, no-c-format
msgid "Average of N numbers"
msgstr ""

#. Tag: para
#, no-c-format
msgid "In the next program we will do an average of N numbers."
msgstr ""

#. Tag: screen
#, no-c-format
msgid "\n"
"\n"
"#!/usr/bin/env python\n"
"N = 10\n"
"sum = 0\n"
"count = 0\n"
"while count &#60; N:\n"
"    number = float(raw_input(&#34;&#34;))\n"
"    sum = sum + number\n"
"    count = count + 1\n"
"average = float(sum)/N\n"
"print &#34;N = %d , Sum = %f&#34; % (N, sum)\n"
"print &#34;Average = %f&#34; % average\n"
"\n"
""
msgstr ""

#. Tag: screen
#, no-c-format
msgid "\n"
"\n"
"[kd@kdlappy book]$ ./averagen.py\n"
"1\n"
"2.3\n"
"4.67\n"
"1.42\n"
"7\n"
"3.67\n"
"4.08\n"
"2.2\n"
"4.25\n"
"8.21\n"
"N = 10 , Sum = 38.800000\n"
"Average = 3.880000\n"
"\n"
""
msgstr ""

#. Tag: title
#, no-c-format
msgid "Temperature conversion"
msgstr ""

#. Tag: para
#, no-c-format
msgid "In this program we will convert the given temperature to Celsius from Fahrenheit by using the formula C=(F-32)/1.8"
msgstr ""

#. Tag: screen
#, no-c-format
msgid "\n"
"\n"
"#!/usr/bin/env python\n"
"fahrenhite = 0.0\n"
"print &#34;Fahrenheit Celsius&#34;\n"
"while fahrenheit &#60;= 250:\n"
"    celsius = ( fahrenheit - 32.0 ) / 1.8 #Here we calculate the fahrenhite value\n"
"    print &#34;%5.1f %7.2f&#34; % (fahrenheit , celsius)\n"
"    fahrenheit = fahrenheit + 25\n"
"\n"
""
msgstr ""

#. Tag: screen
#, no-c-format
msgid "\n"
"\n"
"[kd@kdlappy book]$ ./temperature.py\n"
"Fahrenheit Celsius\n"
"  0.0  -17.78\n"
" 25.0   -3.89\n"
" 50.0   10.00\n"
" 75.0   23.89\n"
"100.0   37.78\n"
"125.0   51.67\n"
"150.0   65.56\n"
"175.0   79.44\n"
"200.0   93.33\n"
"225.0  107.22\n"
"250.0  121.11\n"
"\n"
""
msgstr ""

#. Tag: title
#, no-c-format
msgid "Multiple assignments in a single line"
msgstr ""

#. Tag: para
#, no-c-format
msgid "You can even assign values to multiple variables in a single line, like"
msgstr ""

#. Tag: screen
#, no-c-format
msgid "\n"
"\n"
"&#62;&#62;&#62; a , b = 45, 54\n"
"&#62;&#62;&#62; a\n"
"45\n"
"&#62;&#62;&#62; b\n"
"54\n"
"\n"
""
msgstr ""

#. Tag: para
#, no-c-format
msgid "Using this swapping two numbers becomes very easy"
msgstr ""

#. Tag: screen
#, no-c-format
msgid "\n"
"\n"
"&#62;&#62;&#62; a, b = b , a\n"
"&#62;&#62;&#62; a\n"
"54\n"
"&#62;&#62;&#62; b\n"
"45\n"
"\n"
""
msgstr ""

