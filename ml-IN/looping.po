# translation of looping.po to Malayalam
# translation of looping.po to
# Language ml-IN translations for Python_for_you_and_me package.
#
# Automatically generated, 2008.
# Jaganadh G <jaganadhg@gmail.com>, 2008.
msgid ""
msgstr ""
"Project-Id-Version: looping\n"
"Report-Msgid-Bugs-To: http://bugs.kde.org\n"
"POT-Creation-Date: 2008-12-24 15:13+0000\n"
"PO-Revision-Date: 2009-09-19 20:00+0530\n"
"Last-Translator: JAGANADH G <jaganadhg@au-kbc.org>\n"
"Language-Team: Malayalam <ml-IN>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: KBabel 1.11.4\n"

#. Tag: title
#: looping.xml:6
#, no-c-format
msgid "Looping"
msgstr "ലൂപ്പിംങ്"

#. Tag: para
#: looping.xml:7
#, no-c-format
msgid "In the examples we used before , sometimes it was required to do the same work couple of times. We use a counter to check how many times the code needs to be executed. This technique is known as looping. First we are going to look into while statement for looping."
msgstr "നാം മുന്‍പ് പറഞ്ഞ ചില ഉദാഹരണങ്ങളില്‍ ‍,  ചില പ്രവൃത്തികള്‍ ആവര്‍ത്തിച്ച് ചെയ്യേണ്ടി വരാം. പ്രോഗ്രാം എത്ര തവണ ഉപയോഗിക്കണം എന്ന് അറിയുവാന്‍ നമുക്ക് ഒരു കൌണ്ടര്‍ ഉപയോഗിക്കാം. ഈ സങ്കേതത്തെയാണ് ലൂപ്പിംഗ് എന്ന് വിളിക്കുന്നത് . ആദ്യം നമുക്ക് while ലൂപ്പിനെ പരിചയപ്പെടാം. "

#. Tag: title
#: looping.xml:12
#, no-c-format
msgid "While loop"
msgstr "While ലൂപ്പ്"

#. Tag: para
#: looping.xml:13
#, no-c-format
msgid "The syntax for <emphasis>while</emphasis> statement is like"
msgstr "<emphasis>while</emphasis>  ലൂപ്പിന്‍റെ വാക്യ ക്രമം താഴെക്കൊടുത്തിരിക്കുന്നു. "

#. Tag: screen
#: looping.xml:16
#, no-c-format
msgid ""
"<![CDATA[\n"
"while condition:\n"
"    statement1\n"
"    statement2\n"
"]]>"
msgstr ""
"<![CDATA[\n"
"while condition:\n"
"    statement1\n"
"    statement2\n"
"]]>"

#. Tag: para
#: looping.xml:17
#, no-c-format
msgid "The code we want to reuse must be indented properly under the while statement. They will be executed if the <emphasis>condition</emphasis> is true. Again like in <emphasis>if-else</emphasis> statement any non zero value is true. Let us write a simple code to print numbers 0 to 10"
msgstr "നമുക്ക് വീണ്ടും ഉപയോഗിക്കേണ്ട കോഡ് (പ്രോഗ്രം ഭാഗം) while പ്രസ്താവനയ്ക്  ശേഷം കൃത്യമായ ഇന്‍ഡന്‍റോടെ നല്‍കണം. അവ <emphasis>(condition)കണ്ടീഷനുകള്‍</emphasis> സത്യമാകുന്പോള്‍ പ്രവര്‍ത്തിപ്പിക്കും.<emphasis>if-else</emphasis> പ്രസ്താവനയിലെന്നപോലെ പൂജ്യമല്ലാത്ത ഏതൊരു മൂല്യവും സത്യമാണ്. ഇത് വിശദമാക്കുന്ന ഒരു ചെറിയ പ്രോഗ്രാം നോക്കാം. 0 മുതല്‍ 10 വരെ അച്ചടിക്കുകയാണ് ഈപ്രോഗ്രം ചെയ്യുന്നത്. "

#. Tag: screen
#: looping.xml:20
#, no-c-format
msgid ""
"<![CDATA[\n"
">>> n = 0\n"
">>> while n < 11:\n"
"...     print n\n"
"...     n += 1\n"
"...\n"
"0\n"
"1\n"
"2\n"
"3\n"
"4\n"
"5\n"
"6\n"
"7\n"
"8\n"
"9\n"
"10\n"
"]]>"
msgstr ""
"<![CDATA[\n"
">>> n = 0\n"
">>> while n < 11:\n"
"...     print n\n"
"...     n += 1\n"
"...\n"
"0\n"
"1\n"
"2\n"
"3\n"
"4\n"
"5\n"
"6\n"
"7\n"
"8\n"
"9\n"
"10\n"
"]]>"

#. Tag: para
#: looping.xml:21
#, no-c-format
msgid "In the first line we are setting <emphasis>n = 0</emphasis>, then in the while statement the condition is <emphasis>n <![CDATA[<]]> 11 </emphasis>, that means what ever line indented below that will execute until n becomes same or greater than 11. Inside the loop we are just printing the value of n and then increasing it by one."
msgstr "ഒന്നാമത്തെ വരിയില്‍ നാം <emphasis>n = 0</emphasis> ആയി ക്രമീകരിക്കുന്നു, അതിനുശേഷം while പ്രസ്താവനയില്‍ <emphasis>n <![CDATA[<]]> 11 </emphasis> എന്നും ക്രമീകരിക്കുന്നു. അതിനുശേഷം ഇന്‍ഡന്റ് ചെയ്ത് ചെയ്ത് പരഞ്ഞിരിക്കുന്ന കാര്യങ്ങള്‍ n 11 നേക്കാള്‍ കൂടുകയോ തുല്യമാകുന്നതുവരെയോ പ്രവര്‍ത്തിപ്പിക്കുന്നു.  ലൂപ്പിനകത്ത് ഇപ്പോള്‍ നാം n ന്‍റെ മൂല്യം അച്ചടിക്കുക മാത്രമാണ് ചെയ്യുന്നത്. "

#. Tag: title
#: looping.xml:27
#, no-c-format
msgid "Fibonacci Series"
msgstr "ഫിബനോച്ചി ക്രമം "

#. Tag: para
#: looping.xml:28
#, no-c-format
msgid "Let us try to solve <emphasis>Fibonacci</emphasis> series. In this series we get the next number by adding the previous two numbers. So the series looks like <emphasis>1,1,2,3,5,8,13 .......</emphasis>"
msgstr "ഇനി നമുക്ക് <emphasis>ഫിബനോച്ചി</emphasis> ക്രമം പ്രോഗ്രാമിലൂടെ നിര്‍മ്മിക്കാം.  ഈ ക്രമത്തില്‍ നമുക്ക് അടുത്ത സംഖ്യ ലഭിക്കുവാന്‍ തൊട്ടുമുന്‍പുള്ള രണ്ട് സംഖ്യകള്‍ തമ്മില്‍ കൂട്ടണം. അപ്പോള്‍ ഈ ക്രമം <emphasis>1,1,2,3,5,8,13 ....... <emphasis>എന്നിങ്ങനെയാകും."

#. Tag: screen
#: looping.xml:31
#, no-c-format
msgid ""
"<![CDATA[\n"
"#!/usr/bin/env python\n"
"a, b = 0, 1\n"
"while b < 100:\n"
"    print b\n"
"    a, b = b, a + b\n"
"]]>"
msgstr ""
"<![CDATA[\n"
"#!/usr/bin/env python\n"
"a, b = 0, 1\n"
"while b < 100:\n"
"    print b\n"
"    a, b = b, a + b\n"
"]]>"

#. Tag: para
#: looping.xml:32
#: looping.xml:43
#: looping.xml:54
#: looping.xml:72
#: looping.xml:91
#: looping.xml:95
#: looping.xml:99
#: looping.xml:149
#, no-c-format
msgid "The output"
msgstr "ഔട്ട്പുട്ട്"

#. Tag: screen
#: looping.xml:35
#, no-c-format
msgid ""
"<![CDATA[\n"
"[kd@kdlappy book]$ ./fibonacci1.py\n"
"1\n"
"1\n"
"2\n"
"3\n"
"5\n"
"8\n"
"13\n"
"21\n"
"34\n"
"55\n"
"89\n"
"]]>"
msgstr ""
"<![CDATA[\n"
"[kd@kdlappy book]$ ./fibonacci1.py\n"
"1\n"
"1\n"
"2\n"
"3\n"
"5\n"
"8\n"
"13\n"
"21\n"
"34\n"
"55\n"
"89\n"
"]]>"

#. Tag: para
#: looping.xml:36
#, no-c-format
msgid "In the first line of the code we are initializing <emphasis>a</emphasis> and <emphasis>b</emphasis>, then looping while b's value is less than 100. Inside the loop first we are printing the value of <emphasis>b</emphasis> and then in the next line putting the value of <emphasis>b</emphasis> to <emphasis>a</emphasis> and <emphasis>a + b</emphasis> to <emphasis>b</emphasis> in the same line."
msgstr "ഒന്നാമത്തെ വരിയില്‍ പ്രോഗ്രാം <emphasis>a</emphasis> <emphasis>b</emphasis> എന്നീ ചരങ്ങളുടെ മൂല്യം സംഭരിക്കുന്നു, അതിനുശേഷം  b യുടെ മൂല്യം 100 ല്‍ താഴെയാകുന്നതുവരെ ലൂപ്പ് പ്രവര്‍ത്തിപ്പിക്കുന്നു.   ലൂപ്പിനുള്ളില്‍ ആദ്യം <emphasis>b</emphasis> യുടെ മൂല്യം അച്ചടിക്കുന്നു അതിനുശേഷം <emphasis>a</emphasis>യിലേക്ക് <emphasis>b</emphasis>യുടെ മൂല്യവും <emphasis>b</emphasis>യിലേക്ക് <emphasis>a</emphasis>യുടെ മൂല്യവും <emphasis>b</emphasis>യുടെമൂല്യവും കൂടി സങ്കലനം ചെയ്ത് നല്‍കുന്നു. "

#. Tag: para
#: looping.xml:39
#, no-c-format
msgid "If you put a trailing comma in the <emphasis>print</emphasis> statement , then it will print in the same line"
msgstr "<emphasis>print</emphasis> പ്രസ്താവനക്ക് ശേഷം ഒരു ',' (കോമ) ഇട്ടാല്‍ സംഖ്യകളെല്ലാം ഒരേ വരിയില്‍ത്തന്നെ അച്ചടിക്കും. "

#. Tag: screen
#: looping.xml:42
#, no-c-format
msgid ""
"<![CDATA[\n"
"#!/usr/bin/env python\n"
"a, b = 0, 1\n"
"while b < 100:\n"
"    print b,\n"
"    a, b = b, a + b\n"
"]]>"
msgstr ""
"<![CDATA[\n"
"#!/usr/bin/env python\n"
"a, b = 0, 1\n"
"while b < 100:\n"
"    print b,\n"
"    a, b = b, a + b\n"
"]]>"

#. Tag: screen
#: looping.xml:46
#, no-c-format
msgid ""
"<![CDATA[\n"
"[kd@kdlappy book]$ ./fibonacci2.py\n"
"1 1 2 3 5 8 13 21 34 55 89\n"
"]]>"
msgstr ""
"<![CDATA[\n"
"[kd@kdlappy book]$ ./fibonacci2.py\n"
"1 1 2 3 5 8 13 21 34 55 89\n"
"]]>"

#. Tag: title
#: looping.xml:49
#, no-c-format
msgid "Power Series"
msgstr "പവര്‍ ക്രമം "

#. Tag: para
#: looping.xml:50
#, no-c-format
msgid "Let us write a program to evaluate the power series. The series looks like e**x =1+x+x**2/2! +x**3/3! +....+ x**n/n! where <![CDATA[0 <x <1]]>"
msgstr "പവര്‍ക്രമത്തെ മനസിലാക്കാന്‍ നമുക്ക് ഒരു പ്രോഗ്രാം എഴുതി നോക്കാം.പവര്‍ക്രമത്തെ നമുക്ക് ഇങ്ങനെ കണക്കാക്കാം  e**x =1+x+x**2/2! +x**3/3! +....+ x**n/n! where <![CDATA[0 <x <1]]>"

#. Tag: screen
#: looping.xml:53
#, no-c-format
msgid ""
"<![CDATA[\n"
"#!/usr/bin/env python\n"
"x = float(raw_input(\"Enter the value of x: \"))\n"
"n = term = num = 1\n"
"sum = 1.0\n"
"while n <= 100:\n"
"    term *= x / n\n"
"    sum += terrm\n"
"    n += 1\n"
"    if term < 0.0001:\n"
"        break\n"
"print \"No of Times= %d and Sum= %f\" % (n, sum)\n"
"]]>"
msgstr ""
"<![CDATA[\n"
"#!/usr/bin/env python\n"
"x = float(raw_input(\"Enter the value of x: \"))\n"
"n = term = num = 1\n"
"sum = 1.0\n"
"while n <= 100:\n"
"    term *= x / n\n"
"    sum += terrm\n"
"    n += 1\n"
"    if term < 0.0001:\n"
"        break\n"
"print \"No of Times= %d and Sum= %f\" % (n, sum)\n"
"]]>"

#. Tag: screen
#: looping.xml:55
#, no-c-format
msgid ""
"<![CDATA[\n"
"kd@kdlappy book]$ ./powerseries.py\n"
"Enter the value of x: 0\n"
"No of Times= 2 and Sum= 1.000000\n"
"[kd@kdlappy book]$ ./powerseries.py\n"
"Enter the value of x: 0.1\n"
"No of Times= 5 and Sum= 1.105171\n"
"[kd@kdlappy book]$ ./powerseries.py\n"
"Enter the value of x: 0.5\n"
"No of Times= 7 and Sum= 1.648720\n"
"]]>"
msgstr ""
"<![CDATA[\n"
"kd@kdlappy book]$ ./powerseries.py\n"
"Enter the value of x: 0\n"
"No of Times= 2 and Sum= 1.000000\n"
"[kd@kdlappy book]$ ./powerseries.py\n"
"Enter the value of x: 0.1\n"
"No of Times= 5 and Sum= 1.105171\n"
"[kd@kdlappy book]$ ./powerseries.py\n"
"Enter the value of x: 0.5\n"
"No of Times= 7 and Sum= 1.648720\n"
"]]>"

#. Tag: para
#: looping.xml:56
#, no-c-format
msgid "In this program we introduced a new keyword called <emphasis>break</emphasis>. What break does is stop the innermost loop. In this example we are using <emphasis>break</emphasis> under the <emphasis>if</emphasis> statement"
msgstr "ഈ പ്രോഗ്രാമില്‍ നമുക്ക് <emphasis>break</emphasis> എന്ന ഒരു പുതിയ കീവേഡിനെ പരിചയപ്പെടാം.ഒരു ഇന്നര്‍മോസ്ററ് ലൂപ്പിനെ നിറുത്തുക എന്നതാണ് ഒരു  break ചെയ്യുന്നത്.ഈ ഉദാഹരണത്തില്‍ <emphasis>break</emphasis> ഉപയോഗിക്കുന്നത് <emphasis>if</emphasis> സ്റേറററ്മെന്‍റിന്‍റെ താഴെയാണ്."

#. Tag: screen
#: looping.xml:59
#, no-c-format
msgid ""
"<![CDATA[\n"
"if term < 0.0001:\n"
"        break\n"
"]]>"
msgstr ""
"<![CDATA[\n"
"if term < 0.0001:\n"
"        break\n"
"]]>"

#. Tag: para
#: looping.xml:60
#, no-c-format
msgid "This means if the value of <emphasis>term</emphasis> is less than <emphasis>0.0001</emphasis> then get out of the loop."
msgstr "<emphasis>term</emphasis> ന്‍റെ മൂല്യം <emphasis>0.0001</emphasis> നേക്കാള്‍ കുറയുന്പോള്‍‌ ലൂപ്പില്‍ നിന്നും പുറത്തുപോകും എന്നാണ് ഇത് സൂചിപ്പിക്കുന്നത്."

#. Tag: title
#: looping.xml:67
#, no-c-format
msgid "Multiplication Table"
msgstr "ഗുണനപ്പട്ടിക"

#. Tag: para
#: looping.xml:68
#, no-c-format
msgid "In this example we are going to print the multiplication table up to 10."
msgstr "ഒന്നു മുതല്‍ പത്തു വരെയുളള സംഖ്യകളുടെ ഗുണനപ്പട്ടിക എങ്ങനെ പ്രിന്റ് ചെയ്യിക്കാമെന്ന് നോക്കാം"

#. Tag: screen
#: looping.xml:71
#, no-c-format
msgid ""
"<![CDATA[\n"
"#!/usr/bin/env python\n"
"i = 1\n"
"print \"-\" * 50\n"
"while i < 11:\n"
"    n = 1\n"
"    while n <= 10:\n"
"        print \"%4d\" % (i * n),\n"
"        n += 1\n"
"    print \"\"\n"
"    i += 1\n"
"print \"-\" * 50\n"
"]]>"
msgstr ""
"<![CDATA[\n"
"#!/usr/bin/env python\n"
"i = 1\n"
"print \"-\" * 50\n"
"while i < 11:\n"
"    n = 1\n"
"    while n <= 10:\n"
"        print \"%4d\" % (i * n),\n"
"        n += 1\n"
"    print \"\"\n"
"    i += 1\n"
"print \"-\" * 50\n"
"]]>"

#. Tag: screen
#: looping.xml:73
#, no-c-format
msgid ""
"<![CDATA[\n"
"[kd@kdlappy book]$ ./multiplication.py\n"
"--------------------------------------------------\n"
"   1    2    3    4    5    6    7    8    9   10\n"
"   2    4    6    8   10   12   14   16   18   20\n"
"   3    6    9   12   15   18   21   24   27   30\n"
"   4    8   12   16   20   24   28   32   36   40\n"
"   5   10   15   20   25   30   35   40   45   50\n"
"   6   12   18   24   30   36   42   48   54   60\n"
"   7   14   21   28   35   42   49   56   63   70\n"
"   8   16   24   32   40   48   56   64   72   80\n"
"   9   18   27   36   45   54   63   72   81   90\n"
"  10   20   30   40   50   60   70   80   90  100\n"
"--------------------------------------------------\n"
"]]>"
msgstr ""
"<![CDATA[\n"
"[kd@kdlappy book]$ ./multiplication.py\n"
"--------------------------------------------------\n"
"   1    2    3    4    5    6    7    8    9   10\n"
"   2    4    6    8   10   12   14   16   18   20\n"
"   3    6    9   12   15   18   21   24   27   30\n"
"   4    8   12   16   20   24   28   32   36   40\n"
"   5   10   15   20   25   30   35   40   45   50\n"
"   6   12   18   24   30   36   42   48   54   60\n"
"   7   14   21   28   35   42   49   56   63   70\n"
"   8   16   24   32   40   48   56   64   72   80\n"
"   9   18   27   36   45   54   63   72   81   90\n"
"  10   20   30   40   50   60   70   80   90  100\n"
"--------------------------------------------------\n"
"]]>"

#. Tag: para
#: looping.xml:74
#, no-c-format
msgid "Here we used one while loop inside another loop, this is known as nested looping. You can also see one interesting statement here"
msgstr "ഇവിടെ നമ്മള്‍ ഒരു while ലൂപ്പിനുള്ളില്‍ മറെറാരു while ലൂപ്പ് ഉപയോഗിക്കുന്നു എന്ന് നോക്കാം. ഇതിനെ നെസ്ററഡ് while ലൂപ്പ് എന്ന് വിളിക്കാം. ഇതിനോട് കൂടെതന്നെ മറെറാരു അതിശയകരമായ പ്രസ്താവന കാണാം "

#. Tag: screen
#: looping.xml:76
#, no-c-format
msgid ""
"<![CDATA[\n"
"print \"-\" * 50\n"
"]]>"
msgstr ""
"<![CDATA[\n"
"print \"-\" * 50\n"
"]]>"

#. Tag: para
#: looping.xml:77
#, no-c-format
msgid "In a <emphasis>print</emphasis> statement if we multiply the string with an integer <emphasis>n</emphasis> , the string will be printed <emphasis>n</emphasis>many times. Some examples"
msgstr "ഒരു സട്രിംഗും <emphasis>n</emphasis> സംഖ്യയും തമ്മില്‍ ഗുണിച്ചെടുക്കുന്പോള്‍  <emphasis>print</emphasis> പ്രസ്താവനയില്‍ <emphasis>n</emphasis> പ്രാവശ്യം സട്രിംഗ് പ്രിന്‍റ് ചെയ്യും.ഉദാഹരണം കാണുക "

#. Tag: screen
#: looping.xml:81
#, no-c-format
msgid ""
"<![CDATA[\n"
">>> print \"*\" * 10\n"
"**********\n"
">>> print \"#\" * 20\n"
"####################\n"
">>> print \"--\" * 20\n"
"----------------------------------------\n"
">>> print \"-\" * 40\n"
"----------------------------------------\n"
"]]>"
msgstr ""
"<![CDATA[\n"
">>> print \"*\" * 10\n"
"**********\n"
">>> print \"#\" * 20\n"
"####################\n"
">>> print \"--\" * 20\n"
"----------------------------------------\n"
">>> print \"-\" * 40\n"
"----------------------------------------\n"
"]]>"

#. Tag: title
#: looping.xml:85
#, no-c-format
msgid "Some printing * examples"
msgstr "കുറച്ച് പ്രിന്‍റിംഗ് ഉദാഹരണങ്ങള്‍ "

#. Tag: para
#: looping.xml:86
#, no-c-format
msgid "Here are some examples which you can find very often in college lab reports"
msgstr "കോളേജ് ലാബ് റിപ്പോര്‍ട്ടില്‍ നിങ്ങള്‍ കാണാറുള്ള ചില ഉദാഹരണങ്ങളാണിവ"

#. Tag: para
#: looping.xml:89
#, no-c-format
msgid "Design 1"
msgstr "ഡിസൈന്‍ 1"

#. Tag: screen
#: looping.xml:90
#, no-c-format
msgid ""
"<![CDATA[\n"
"#!/usr/bin/env python\n"
"row = int(raw_input(\"Enter the number of rows: \"))\n"
"n = row\n"
"while n >= 0:\n"
"    x =  \"*\" * n\n"
"    print x\n"
"    n -= 1\n"
"]]>"
msgstr ""
"<![CDATA[\n"
"#!/usr/bin/env python\n"
"row = int(raw_input(\"Enter the number of rows: \"))\n"
"n = row\n"
"while n >= 0:\n"
"    x =  \"*\" * n\n"
"    print x\n"
"    n -= 1\n"
"]]>"

#. Tag: screen
#: looping.xml:92
#, no-c-format
msgid ""
"<![CDATA[\n"
"[kd@kdlappy book]$ ./design1.py\n"
"Enter the number of rows: 5\n"
"*****\n"
"****\n"
"***\n"
"**\n"
"*\n"
"]]>"
msgstr ""
"<![CDATA[\n"
"[kd@kdlappy book]$ ./design1.py\n"
"Enter the number of rows: 5\n"
"*****\n"
"****\n"
"***\n"
"**\n"
"*\n"
"]]>"

#. Tag: para
#: looping.xml:93
#, no-c-format
msgid "Design 2"
msgstr "ഡിസൈന്‍ 2"

#. Tag: screen
#: looping.xml:94
#, no-c-format
msgid ""
"<![CDATA[\n"
"#!/usr/bin/env python\n"
"n = int(raw_input(\"Enter the number of rows: \"))\n"
"i = 1\n"
"while i <= n:\n"
"    print \"*\" * i\n"
"    i += 1\n"
"]]>"
msgstr ""
"<![CDATA[\n"
"#!/usr/bin/env python\n"
"n = int(raw_input(\"Enter the number of rows: \"))\n"
"i = 1\n"
"while i <= n:\n"
"    print \"*\" * i\n"
"    i += 1\n"
"]]>"

#. Tag: screen
#: looping.xml:96
#, no-c-format
msgid ""
"<![CDATA[\n"
"[kd@kdlappy book]$ ./design2.py\n"
"Enter the number of rows: 5\n"
"*\n"
"**\n"
"***\n"
"****\n"
"*****\n"
"]]>"
msgstr ""
"<![CDATA[\n"
"[kd@kdlappy book]$ ./design2.py\n"
"Enter the number of rows: 5\n"
"*\n"
"**\n"
"***\n"
"****\n"
"*****\n"
"]]>"

#. Tag: para
#: looping.xml:97
#, no-c-format
msgid "Design 3"
msgstr "ഡിസൈന്‍ 3"

#. Tag: screen
#: looping.xml:98
#, no-c-format
msgid ""
"<![CDATA[\n"
"#!/usr/bin/env python\n"
"row = int(raw_input(\"Enter the number of rows: \"))\n"
"n = row\n"
"while n >= 0:\n"
"    x =  \"*\" * n\n"
"    y = \" \" * (row - n)\n"
"    print y + x\n"
"    n -= 1\n"
"]]>"
msgstr ""
"<![CDATA[\n"
"#!/usr/bin/env python\n"
"row = int(raw_input(\"Enter the number of rows: \"))\n"
"n = row\n"
"while n >= 0:\n"
"    x =  \"*\" * n\n"
"    y = \" \" * (row - n)\n"
"    print y + x\n"
"    n -= 1\n"
"]]>"

#. Tag: screen
#: looping.xml:100
#, no-c-format
msgid ""
"<![CDATA[\n"
"[kd@kdlappy book]$ ./design3.py\n"
"Enter the number of rows: 5\n"
"*****\n"
" ****\n"
"  ***\n"
"   **\n"
"    *\n"
"]]>"
msgstr ""
"<![CDATA[\n"
"[kd@kdlappy book]$ ./design3.py\n"
"Enter the number of rows: 5\n"
"*****\n"
" ****\n"
"  ***\n"
"   **\n"
"    *\n"
"]]>"

#. Tag: title
#: looping.xml:104
#, no-c-format
msgid "Lists"
msgstr "ലിസ്ററുകള്‍ "

#. Tag: para
#: looping.xml:105
#, no-c-format
msgid "We are going to learn a data structure called list before we go ahead to learn more on looping. Lists an be written as a list of comma-separated values (items) between square brackets."
msgstr "ലൂപ്പിംഗിനെക്കുറിച്ച് കൂടുതല്‍ പഠിക്കുന്നതിനു മുന്പ് നമുക്ക് ലിസ്ററ് എന്ന് പേരുള്ള ഒരു ഡാററാസ്ട്രക്ചറിനെ കുറിച്ച് മനസ്സിലാക്കാം. ചതുര  ബ്രായ്ക്കററിനുള്ളില്‍ ഒരു ലിസ്ററുപോലെ എഴുതാവുന്ന മൂല്യങ്ങളെ(തരങ്ങള്‍ ) ലിസ്ററുകള്‍ എന്ന് പറയുന്നു,ഇവ കോമ കൊണ്ട് വേര്‍തിരിക്കപ്പെട്ടിട്ടുണ്ടാവും."

#. Tag: screen
#: looping.xml:108
#, no-c-format
msgid ""
"<![CDATA[\n"
">>> a = [ 1 , 342, 2233423, 'India', 'Fedora']\n"
">>> a\n"
"[1, 342, 2233423, 'India', 'Fedora']\n"
"]]>"
msgstr ""
"<![CDATA[\n"
">>> a = [ 1 , 342, 2233423, 'India', 'Fedora']\n"
">>> a\n"
"[1, 342, 2233423, 'India', 'Fedora']\n"
"]]>"

#. Tag: para
#: looping.xml:109
#, no-c-format
msgid "Lists can keep any other data inside it. It works as a sequence too, that means"
msgstr "ലിസ്ററുകള്‍ക്ക് ഏതുതരം വിവരങ്ങളും സൂക്ഷിക്കാന്‍ പററും.ഇതൊരു ചങ്ങല പോലെയാണ് പ്രവര്‍ത്തിക്കുന്നത്,എന്നു വച്ചാല്‍ "

#. Tag: screen
#: looping.xml:110
#, no-c-format
msgid ""
"<![CDATA[\n"
">>> a[0]\n"
"1\n"
">>> a[4]\n"
"'Fedora'\n"
"]]>"
msgstr ""
"<![CDATA[\n"
">>> a[0]\n"
"1\n"
">>> a[4]\n"
"'Fedora'\n"
"]]>"

#. Tag: para
#: looping.xml:111
#, no-c-format
msgid "You can even slice it into different pieces, examples are given below"
msgstr "വേറെ വേറെ കഷണങ്ങളായി നിങ്ങള്‍ക്കിത് മുറിച്ചെടുക്കാന്‍ പററും.ഉദാഹരണങ്ങള്‍ താഴെ കൊടുക്കുന്നു"

#. Tag: screen
#: looping.xml:112
#, no-c-format
msgid ""
"<![CDATA[\n"
">>> a[4]\n"
"'Fedora'\n"
">>> a[-1]\n"
"'Fedora'\n"
">>> a[-2]\n"
"'India'\n"
">>> a[0:-1]\n"
"[1, 342, 2233423, 'India']\n"
">>> a[2:-2]\n"
"[2233423]\n"
">>> a[:-2]\n"
"[1, 342, 2233423]\n"
">>> a[0::2]\n"
"[1, 2233423, 'Fedora']\n"
"]]>"
msgstr ""
"<![CDATA[\n"
">>> a[4]\n"
"'Fedora'\n"
">>> a[-1]\n"
"'Fedora'\n"
">>> a[-2]\n"
"'India'\n"
">>> a[0:-1]\n"
"[1, 342, 2233423, 'India']\n"
">>> a[2:-2]\n"
"[2233423]\n"
">>> a[:-2]\n"
"[1, 342, 2233423]\n"
">>> a[0::2]\n"
"[1, 2233423, 'Fedora']\n"
"]]>"

# check this is correct or not
#. Tag: para
#: looping.xml:113
#, no-c-format
msgid "In the last example we used two :(s) , the last value inside the third brackets indicates step. <emphasis>s[i:j:k]</emphasis> means slice of <emphasis>s</emphasis> from <emphasis>i</emphasis> to <emphasis>j</emphasis> with step <emphasis>k</emphasis>."
msgstr "അവസാനത്തെ ഉദാഹരണത്തില്‍ നമ്മള്‍ രണ്ട് :(s) ഉപയോഗിച്ചിട്ടുണ്ട്, ബ്രാക്കററിലെ മൂന്നാമത്തെ വാര്യബിള്‍ സൂചിപ്പിക്കുന്നത് step ആണ്.<emphasis>s[i:j:k]</emphasis> അര്‍ത്ഥമാക്കുന്നത്  <emphasis>s</emphasis> ല്‍ നിന്നും <emphasis>i</emphasis> മുതല്‍  <emphasis>j</emphasis> വരെയുളള മൂല്യങ്ങളെ <emphasis>k</emphasis> അടിസ്ഥാനമാക്കി മുറിച്ചെടുക്കുക എന്നാണ്."

#. Tag: para
#: looping.xml:114
#, no-c-format
msgid "To check if any value exists within the list or not you can do"
msgstr "ഏതെങ്കിലും മൂല്യം ലിസ്ററിനകത്തുണ്ടോ ഇല്ലയോ എന്ന് പരിശോധിക്കാന്‍ നിങ്ങള്‍ക്ക് ഇങ്ങനെ സാധിക്കും"

#. Tag: screen
#: looping.xml:115
#, no-c-format
msgid ""
"<![CDATA[\n"
">>> a = ['Fedora', 'is', 'cool']\n"
">>> 'cool' in a\n"
"True\n"
">>> 'Linux' in a\n"
"False\n"
"]]>"
msgstr ""
"<![CDATA[\n"
">>> a = ['Fedora', 'is', 'cool']\n"
">>> 'cool' in a\n"
"True\n"
">>> 'Linux' in a\n"
"False\n"
"]]>"

#. Tag: para
#: looping.xml:116
#, no-c-format
msgid "That means we can use the above statement as <emphasis>if</emphasis> clause expression. The built-in function <emphasis>len()</emphasis> can tell the length of a list."
msgstr "ഇതര്‍ത്ഥമാക്കുന്നത് മുകളില്‍ കൊടുത്തിരിക്കുന്ന പ്രസ്താവന നമുക്ക് <emphasis>if</emphasis> ക്ളോസ് എക്സപ്രഷനായി ഉപയോഗിക്കാം എന്നാണ്.ബില്‍ററ് ഇന്‍ ഫങ്ഷനായ <emphasis>len()</emphasis> ലിസ്ററിന്‍റെ നീളം  നമുക്ക് തരും."

#. Tag: screen
#: looping.xml:117
#, no-c-format
msgid ""
"<![CDATA[\n"
">>> len(a)\n"
"3\n"
"]]>"
msgstr ""
"<![CDATA[\n"
">>> len(a)\n"
"3\n"
"]]>"

#. Tag: title
#: looping.xml:120
#, no-c-format
msgid "For loop"
msgstr "For ലൂപ്പ്"

#. Tag: para
#: looping.xml:121
#, no-c-format
msgid "There is another to loop by using <emphasis>for</emphasis> statement. In python the <emphasis>for</emphasis> statement is different from the way it works in <emphasis>C</emphasis>. Here for statement iterates over the items of any sequence (a list or a string). Example given below"
msgstr "<emphasis>for</emphasis> പ്രസ്താവന ഉപയോഗിച്ചു നമുക്ക് മറെറാരു രീതിയില്‍ ലൂപ്പിംഗ് നടത്താം.പൈത്തണില്‍  <emphasis>for</emphasis> പ്രസ്താവന  പ്രവര്‍ത്തിക്കുന്നത്  <emphasis>C</emphasis> യില്‍ നിന്നും വ്യത്യാസമായാണ്.ഇവിടെ for പ്രസ്താവന ഏതു സീക്വന്‍സിന്‍റെയും (ലിസ്ററ് അല്ലെങ്കില്‍ സ്ട്രിംഗ്) എല്ലാ തരങ്ങളിലൂടെയും ഇറററേററ് ചെയ്ത് പോകുന്നു.ഉദാഹരണങ്ങള്‍ താഴെക്കൊടുത്തിരിക്കുന്നു."

#. Tag: screen
#: looping.xml:124
#, no-c-format
msgid ""
"<![CDATA[\n"
">>> a = ['Fedora', 'is', 'powerfull']\n"
">>> for x in a:\n"
"...     print x,\n"
"...\n"
"Fedora is powerfull\n"
"]]>"
msgstr ""
"<![CDATA[\n"
">>> a = ['Fedora', 'is', 'powerfull']\n"
">>> for x in a:\n"
"...     print x,\n"
"...\n"
"Fedora is powerfull\n"
"]]>"

#. Tag: para
#: looping.xml:125
#, no-c-format
msgid "We can also do things like"
msgstr "നമുക്ക് കാര്യങ്ങള്‍ ഇതേപോലെയും ചെയ്യാം"

#. Tag: screen
#: looping.xml:128
#, no-c-format
msgid ""
">>> a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n"
">>> for x in a[::2]:\n"
"...     print x\n"
"...\n"
"1\n"
"3\n"
"5\n"
"7\n"
"9"
msgstr ""
">>> a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n"
">>> for x in a[::2]:\n"
"...     print x\n"
"...\n"
"1\n"
"3\n"
"5\n"
"7\n"
"9"

#. Tag: title
#: looping.xml:132
#, no-c-format
msgid "range() function"
msgstr "range() function"

#. Tag: para
#: looping.xml:133
#, no-c-format
msgid "range() is a buitin function. From the help document"
msgstr "range()  ഒരു ബില്‍ററിന്‍ ഫങ്ഷനാണ്. help documentല്‍ നിന്നും"

#. Tag: screen
#: looping.xml:136
#, no-c-format
msgid ""
"<![CDATA[\n"
"range(...)\n"
"    range([start,] stop[, step]) -> list of integers\n"
"    Return a list containing an arithmetic progression of integers.\n"
"    range(i, j) returns [i, i+1, i+2, ..., j-1]; start (!) defaults to 0.\n"
"    When step is given, it specifies the increment (or decrement).\n"
"    For example, range(4) returns [0, 1, 2, 3].  The end point is omitted!\n"
"    These are exactly the valid indices for a list of 4 elements.\n"
"]]>"
msgstr ""
"<![CDATA[\n"
"range(...)\n"
"    range([start,] stop[, step]) -> list of integers\n"
"    Return a list containing an arithmetic progression of integers.\n"
"    range(i, j) returns [i, i+1, i+2, ..., j-1]; start (!) defaults to 0.\n"
"    When step is given, it specifies the increment (or decrement).\n"
"    For example, range(4) returns [0, 1, 2, 3].  The end point is omitted!\n"
"    These are exactly the valid indices for a list of 4 elements.\n"
"]]>"

#. Tag: para
#: looping.xml:137
#, no-c-format
msgid "Now if you want to see this help message on your system type <emphasis>help(range)</emphasis> in the python interpreter. <emphasis>help(s)</emphasis> will return help message on the object <emphasis>s</emphasis>. Examples of <emphasis>range</emphasis> function"
msgstr "ഇപ്പോള്‍ നിങ്ങളുടെ സിസ്ററത്തില്‍ സഹായസന്ദേശം കാണണമെന്നുണ്ടെങ്കില്‍  പൈത്തണ്‍ ഇന്‍റര്‍പ്രട്ടറില്‍‌  ഇങ്ങനെ ടൈപ്പ് ചെയ്യുക  <emphasis>help(range)</emphasis>. <emphasis>help(s)</emphasis> നമുക്ക് <emphasis>s</emphasis> നെ സംബന്ധിച്ച എല്ലാ സഹായസന്ദേശങ്ങളും നല്കും. <emphasis>range</emphasis> ഫങ്ഷന്‍റെ ഉദാഹരണങ്ങള്‍ താഴെക്കൊടുത്തിരിക്കുന്നു."

#. Tag: screen
#: looping.xml:140
#, no-c-format
msgid ""
"<![CDATA[\n"
">>> range(1,5)\n"
"[1, 2, 3, 4]\n"
">>> range(1,15,3)\n"
"[1, 4, 7, 10, 13]\n"
">>> range(10)\n"
"[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n"
"]]>"
msgstr ""
"<![CDATA[\n"
">>> range(1,5)\n"
"[1, 2, 3, 4]\n"
">>> range(1,15,3)\n"
"[1, 4, 7, 10, 13]\n"
">>> range(10)\n"
"[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n"
"]]>"

#. Tag: title
#: looping.xml:144
#, no-c-format
msgid "Continue statement"
msgstr "Continue പ്രസ്താവന "

#. Tag: para
#: looping.xml:145
#, no-c-format
msgid "Just like <emphasis>break</emphasis> we have another statement, <emphasis>continue</emphasis>, which skips the execution of the code after itself and goes back to the start of the loop. That means it will help you to skip a part of the loop. In the below example we will ask the user to input an integer, if the input is negative then we will ask again, if positive then we will square the number. To get out of the infinite loop user must input 0."
msgstr "<emphasis>break</emphasis> പ്രസ്താവനയെപ്പോലെ ഉപയോഗിക്കാവുന്ന മറെറാരു പ്രസ്താവനയാണ്  <emphasis>continue</emphasis>, ഇത് തനിക്കു ശേഷമുളള കോഡിന്‍റെ എക്സിക്യൂഷന്‍ ഒഴിവാക്കുകയും ലൂപ്പിന്‍റെ തുടക്കത്തിലേക്ക് തിരിച്ചുപോവുകയും ചെയ്യുന്നു.വിശദമായി പറഞ്ഞാല്‍ ഇത് ലൂപ്പിന്‍റെ ഒരു ഭാഗത്തെ ഒഴിവാക്കുന്നു.താഴെ കൊടുത്തിരിക്കുന്ന ഉദാഹരണത്തില്‍ നമ്മള്‍ യൂസറിനോട് ഒരു ഇന്‍പുട്ട് ചോദിക്കുകയും,കിട്ടിയ ഇന്‍പുട്ട് നെഗററീവാണെങ്കില്‍ വീണ്ടും ആവശ്യപ്പെടുകയും ചെയ്യുന്നു,വീണ്ടും കിട്ടിയ ഇന്‍പുട്ട് പോസിററീവ് ആണെങ്കില്‍ അതിന്‍റെ വര്‍ഗം കണ്ടുപിടിക്കുന്നു.യൂസര്‍ 0 ആണ് ഇന്‍പുട്ടായി നല്‍കിയിരിക്കുന്നതെങ്കില്‍ ലൂപ്പില്‍ നിന്ന് പുറത്തുകടക്കുകയും ചെയ്യുന്നു."

#. Tag: screen
#: looping.xml:148
#, no-c-format
msgid ""
"<![CDATA[\n"
"#!/usr/bin/env python\n"
"while True:\n"
"    n = int(raw_input(\"Please enter an Integer: \"))\n"
"    if n < 0:\n"
"        continue #this will take the execution back to the starting of the loop\n"
"    elif n == 0:\n"
"        break\n"
"    print \"Square is \", n ** 2\n"
"print \"Goodbye\"\n"
"]]>"
msgstr ""
"<![CDATA[\n"
"#!/usr/bin/env python\n"
"while True:\n"
"    n = int(raw_input(\"Please enter an Integer: \"))\n"
"    if n < 0:\n"
"        continue #this will take the execution back to the starting of the loop\n"
"    elif n == 0:\n"
"        break\n"
"    print \"Square is \", n ** 2\n"
"print \"Goodbye\"\n"
"]]>"

#. Tag: screen
#: looping.xml:152
#, no-c-format
msgid ""
"[kd@kdlappy book]$ ./continue.py\n"
"Please enter an Integer: 34\n"
"Square is 1156\n"
"Please enter an Integer: 4\n"
"Square is 16\n"
"Please enter an Integer: -9\n"
"Please enter an Integer: 0\n"
"Goodbye"
msgstr ""
"[kd@kdlappy book]$ ./continue.py\n"
"Please enter an Integer: 34\n"
"Square is 1156\n"
"Please enter an Integer: 4\n"
"Square is 16\n"
"Please enter an Integer: -9\n"
"Please enter an Integer: 0\n"
"Goodbye"

#. Tag: title
#: looping.xml:157
#, no-c-format
msgid "Else loop"
msgstr "Else ലൂപ്പ്"

#. Tag: para
#: looping.xml:158
#, no-c-format
msgid "We can have an optional <emphasis>else</emphasis> statement after any loop. It will be executed after the loop unless a <emphasis>break</emphasis> statement stopped the loop."
msgstr "ഏത് ലൂപ്പിനു ശേഷവും വേണമെങ്കില്‍ മാത്രം ഉപയോഗിക്കാവുന്ന തരത്തിലുള്ള ഒരു <emphasis>else</emphasis> പ്രസ്താവനയും നമുക്ക് ഉപയോഗിക്കാവുന്നതാണ്.ഇത് ഒരു <emphasis>break</emphasis> പ്രസ്താവന ഉപയോഗിച്ച് നമ്മള്‍ ലൂപ്പിനെ നിറുത്തുന്നില്ലെങ്കില്‍ മാത്രം ലൂപ്പിനു ശേഷം എക്സിക്യൂട്ട് ചെയ്യും"

#. Tag: screen
#: looping.xml:161
#, no-c-format
msgid ""
"<![CDATA[\n"
">>> for i in range(0,5):\n"
"...     print i\n"
"... else:\n"
"...     print \"Bye bye\"\n"
"...\n"
"0\n"
"1\n"
"2\n"
"3\n"
"4\n"
"Bye bye\n"
"]]>"
msgstr ""
"<![CDATA[\n"
">>> for i in range(0,5):\n"
"...     print i\n"
"... else:\n"
"...     print \"Bye bye\"\n"
"...\n"
"0\n"
"1\n"
"2\n"
"3\n"
"4\n"
"Bye bye\n"
"]]>"

#. Tag: para
#: looping.xml:162
#, no-c-format
msgid "We will see more example of <emphasis>break</emphasis> and <emphasis>continue</emphasis> later in the book."
msgstr "<emphasis>break </emphasis>ന്‍റെയും<emphasis>continue </emphasis>വിന്‍റെയും ഉദാഹരണങ്ങള്‍ നമുക്ക് കുറച്ച് കഴിഞ്ഞ് ഈ പുസ്തകത്തില്‍ കാണാവുന്നതാണ് "

