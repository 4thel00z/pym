# Language ml-IN translations for Python_for_you_and_me package.
# Automatically generated, 2008.
#
msgid ""
msgstr ""
"Project-Id-Version: Python_for_you_and_me VERSION\n"
"Report-Msgid-Bugs-To: http://bugs.kde.org\n"
"POT-Creation-Date: 2008-12-24 15:13+0000\n"
"PO-Revision-Date: 2008-12-24 15:13+0000\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Tag: title
#: strings.xml:6
#, no-c-format
msgid "Strings"
msgstr ""

#. Tag: para
#: strings.xml:7
#, no-c-format
msgid ""
"Strings are nothing but simple text. In python we declare strings in between "
"\"\" or '' or ''' ''' or \"\"\" \"\"\". The examples below will help you to "
"understand sting in a better way."
msgstr ""

#. Tag: screen
#: strings.xml:10
#, no-c-format
msgid ""
"<![CDATA[\n"
">>> s = \"I am Indian\"\n"
">>> s\n"
"'I am Indian'\n"
">>> s = 'I am Indian'\n"
">>> s = \"Here is a line \\\n"
"... splitted in two lines\"\n"
">>> s\n"
"'Here is a line splitted in two lines'\n"
">>> s = \"Here is a line \\n splitted in two lines\"\n"
">>> s\n"
"'Here is a line \\n splitted in two lines'\n"
">>> print s\n"
"Here is a line\n"
" splitted in two lines         \n"
"]]>"
msgstr ""

#. Tag: para
#: strings.xml:11
#, no-c-format
msgid ""
"Now if you want to multiline strings you have to use triple single/double "
"quotes."
msgstr ""

#. Tag: screen
#: strings.xml:14
#, no-c-format
msgid ""
"<![CDATA[\n"
">>> s = \"\"\" This is a\n"
"... multiline string, so you can\n"
"... write many lines\"\"\"\n"
">>> print s\n"
" This is a\n"
"multiline string, so you can\n"
"write many lines\n"
"]]>"
msgstr ""

#. Tag: title
#: strings.xml:16
#, no-c-format
msgid "Different methods available for Strings"
msgstr ""

#. Tag: para
#: strings.xml:17
#, no-c-format
msgid ""
"Every string object is having couple of buildin methods available, we "
"already saw some of them like <emphasis>s.split(\" \")</emphasis>."
msgstr ""

#. Tag: screen
#: strings.xml:20
#, no-c-format
msgid ""
"<![CDATA[\n"
">>> s = \"kushal das\"\n"
">>> s.title()\n"
"'Kushal Das' \n"
"]]>"
msgstr ""

#. Tag: para
#: strings.xml:21
#, no-c-format
msgid ""
"<emphasis>title()</emphasis> method returns a titlecased version of the "
"string, words start with uppercase characters, all remaining cased "
"characters are lowercase."
msgstr ""

#. Tag: screen
#: strings.xml:24
#, no-c-format
msgid ""
"<![CDATA[\n"
">>> z = s.upper()\n"
">>> z\n"
"'KUSHAL DAS'\n"
">>> z.lower()\n"
"'kushal das'\n"
"]]>"
msgstr ""

#. Tag: para
#: strings.xml:25
#, no-c-format
msgid ""
"<emphasis>upper()</emphasis> returns a total uppercase version whereas "
"<emphasis>lower()</emphasis> returns a lower case version of the string."
msgstr ""

#. Tag: screen
#: strings.xml:28
#, no-c-format
msgid ""
"<![CDATA[\n"
">>> s = \"I am A pRoGraMMer\"\n"
">> s.swapcase()\n"
"'i AM a PrOgRAmmER'\n"
"]]>"
msgstr ""

#. Tag: para
#: strings.xml:29
#, no-c-format
msgid "<emphasis>swapcase()</emphasis> returns the string with case swapped :)"
msgstr ""

#. Tag: screen
#: strings.xml:32
#, no-c-format
msgid ""
"<![CDATA[\n"
">>> s = \"jdwb 2323bjb\"\n"
">>> s.isalnum()\n"
"False\n"
">>> s = \"jdwb2323bjb\"\n"
">>> s.isalnum()\n"
"True\n"
"]]>"
msgstr ""

#. Tag: para
#: strings.xml:33
#, no-c-format
msgid ""
"Because of the space in the first line <emphasis>isalnum()</emphasis> "
"returned <emphasis>False</emphasis> , it checks for all charecters are alpha "
"numeric or not."
msgstr ""

#. Tag: screen
#: strings.xml:36
#, no-c-format
msgid ""
"<![CDATA[\n"
">>> s = \"SankarshanSir\"\n"
">>> s.isalpha()\n"
"True\n"
">>> s = \"Sankarshan Sir\"\n"
">>> s.isalpha()\n"
"False\n"
"]]>"
msgstr ""

#. Tag: para
#: strings.xml:37
#, no-c-format
msgid "<emphasis>isalpha()</emphasis> checkes for only alphabets."
msgstr ""

#. Tag: screen
#: strings.xml:40
#, no-c-format
msgid ""
"<![CDATA[\n"
">>> s = \"1234\"\n"
">>> s.isdigit() #To check if all the characters are digits or not\n"
"True\n"
">>> s = \"Fedora9 is coming\"\n"
">>> s.islower() # To check if all chracters are lower case or not\n"
"False\n"
">>> s = \"Fedora9 Is Coming\" \n"
">>> s.istitle() # To check if it is a title or not\n"
"True\n"
">>> s = \"INDIA\"\n"
">>> s.isupper() # To check if characters are in upper case or not\n"
"True\n"
"]]>"
msgstr ""

#. Tag: para
#: strings.xml:41
#, no-c-format
msgid ""
"To split any string we have <emphasis>split()</emphasis>. It takes a string "
"as an argument , depending on that it will split the main string and returns "
"a list containing splitted strings."
msgstr ""

#. Tag: screen
#: strings.xml:44
#, no-c-format
msgid ""
"<![CDATA[\n"
">>> s = \"We all love Python\"\n"
">>> s.split(\" \")\n"
"['We', 'all', 'love', 'Python']\n"
">>> x = \"Nishant:is:waiting\"\n"
">>> x.split(':')\n"
"['Nishant', 'is', 'waiting']\n"
"]]>"
msgstr ""

#. Tag: para
#: strings.xml:45
#, no-c-format
msgid ""
"The opposite method for <emphasis>split()</emphasis> is <emphasis>join()</"
"emphasis>. It takes a list contains strings as input and join them."
msgstr ""

#. Tag: screen
#: strings.xml:48
#, no-c-format
msgid ""
"<![CDATA[\n"
">>> \"-\".join(\"GNU/Linux is great\".split(\" \"))\n"
"'GNU/Linux-is-great'\n"
"]]>"
msgstr ""

#. Tag: para
#: strings.xml:49
#, no-c-format
msgid ""
"In the above example first we are splitting the string \"GNU/Linux is great"
"\" based on the white space, then joining them with \"-\"."
msgstr ""

#. Tag: title
#: strings.xml:55
#, no-c-format
msgid "String the strings"
msgstr ""

#. Tag: para
#: strings.xml:56
#, no-c-format
msgid ""
"Strings do have few methods to do striping. The simplest one is "
"<emphasis>strip(chars)</emphasis>. If you provide the chars argument then it "
"will strip any combination of them. By default it strips only whitespace or "
"newline characters."
msgstr ""

#. Tag: screen
#: strings.xml:59
#, no-c-format
msgid ""
"<![CDATA[\n"
">>> s = \"  abc\\n \"\n"
">>> s.strip()\n"
"'abc'\n"
"]]>"
msgstr ""

#. Tag: para
#: strings.xml:60
#, no-c-format
msgid ""
"You can particularly strip from the left hand or right hand side also using "
"<emphasis>lstrip(chars)</emphasis> or <emphasis>rstrip(chars)</emphasis>."
msgstr ""

#. Tag: screen
#: strings.xml:63
#, no-c-format
msgid ""
"<![CDATA[\n"
">>> s = \"www.foss.in\"\n"
">>> s.lstrip(\"cwsd.\")\n"
"'foss.in'\n"
">>> s.rstrip(\"cnwdi.\")\n"
"'www.foss'\n"
"]]>"
msgstr ""

#. Tag: title
#: strings.xml:67
#, no-c-format
msgid "Finding text"
msgstr ""

#. Tag: para
#: strings.xml:68
#, no-c-format
msgid ""
"Stings have some methods which will help you in finding text/substring in a "
"string. Examples are given below:"
msgstr ""

#. Tag: screen
#: strings.xml:71
#, no-c-format
msgid ""
"<![CDATA[\n"
">>> s.find(\"for\")\n"
"7\n"
">>> s.find(\"fora\")\n"
"-1\n"
">>> s.startswith(\"fa\") #To check if the string startswith fa or not\n"
"True\n"
">>> s.endswith(\"reason\") #\n"
"True\n"
"]]>"
msgstr ""

#. Tag: para
#: strings.xml:72
#, no-c-format
msgid ""
"<emphasis>find()</emphasis> helps to find the first occurrence of the "
"substring given, if not found it returns -1."
msgstr ""

#. Tag: title
#: strings.xml:79
#, no-c-format
msgid "Palindrome checking"
msgstr ""

#. Tag: para
#: strings.xml:80
#, no-c-format
msgid ""
"Palindrome are the kind of strings which are same from left or right "
"whichever way you read them. Example \"madam\". In this example we will take "
"the word as input from the user and say if it is palindrome or not."
msgstr ""

#. Tag: screen
#: strings.xml:83
#, no-c-format
msgid ""
"<![CDATA[\n"
"#!/usr/bin/env python\n"
"s = raw_input(\"Please enter a string: \")\n"
"z = [x for x in s]\n"
"z.reverse()\n"
"if s == \"\".join(z):\n"
"    print \"The string is a palindrome\"\n"
"else:\n"
"    print \"The string is not a palindrome\"\n"
"]]>"
msgstr ""

#. Tag: para
#: strings.xml:84 strings.xml:95
#, no-c-format
msgid "The output"
msgstr ""

#. Tag: screen
#: strings.xml:87
#, no-c-format
msgid ""
"<![CDATA[\n"
"[kd@kdlappy book]$ ./palindrome.py\n"
"Please enter a string: madam1\n"
"The string is not a palindrome\n"
"[kd@kdlappy book]$ ./palindrome.py\n"
"Please enter a string: madam\n"
"The string is a palindrome\n"
"]]>"
msgstr ""

#. Tag: title
#: strings.xml:90
#, no-c-format
msgid "Number of words"
msgstr ""

#. Tag: para
#: strings.xml:91
#, no-c-format
msgid "In this example we will count the number of words in a given line"
msgstr ""

#. Tag: screen
#: strings.xml:94
#, no-c-format
msgid ""
"<![CDATA[\n"
"#!/usr/bin/env python\n"
"s = raw_input(\"Enter a line: \")\n"
"print \"The number of words in the line are %d\" % (len(s.split(\" \")))\n"
"]]>"
msgstr ""

#. Tag: screen
#: strings.xml:96
#, no-c-format
msgid ""
"<![CDATA[\n"
"[kd@kdlappy book]$ ./countwords.py\n"
"Enter a line: Sayamindu is a great programmer\n"
"The number of words in the line are 5 \n"
"]]>"
msgstr ""
