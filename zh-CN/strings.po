# 
# AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: 0\n"
"POT-Creation-Date: 2010-09-27T11:50:13\n"
"PO-Revision-Date: 2010-09-27T11:50:13\n"
"Last-Translator: Automatically generated\n"
"Language-Team: None\n"
"MIME-Version: 1.0\n"
"Content-Type: application/x-publican; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. Tag: title
#, no-c-format
msgid "Strings"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Strings are nothing but simple text. In python we declare strings in between &#34;&#34; or &#39;&#39; or &#39;&#39;&#39; &#39;&#39;&#39; or &#34;&#34;&#34; &#34;&#34;&#34;. The examples below will help you to understand sting in a better way."
msgstr ""

#. Tag: screen
#, no-c-format
msgid "\n"
"\n"
"&#62;&#62;&#62; s = &#34;I am Indian&#34;\n"
"&#62;&#62;&#62; s\n"
"&#39;I am Indian&#39;\n"
"&#62;&#62;&#62; s = &#39;I am Indian&#39;\n"
"&#62;&#62;&#62; s = &#34;Here is a line \\\n"
"... splitted in two lines&#34;\n"
"&#62;&#62;&#62; s\n"
"&#39;Here is a line splitted in two lines&#39;\n"
"&#62;&#62;&#62; s = &#34;Here is a line \n"
" splitted in two lines&#34;\n"
"&#62;&#62;&#62; s\n"
"&#39;Here is a line \n"
" splitted in two lines&#39;\n"
"&#62;&#62;&#62; print s\n"
"Here is a line\n"
" splitted in two lines	 \n"
"\n"
""
msgstr ""

#. Tag: para
#, no-c-format
msgid "Now if you want to multiline strings you have to use triple single/double quotes."
msgstr ""

#. Tag: screen
#, no-c-format
msgid "\n"
"\n"
"&#62;&#62;&#62; s = &#34;&#34;&#34; This is a\n"
"... multiline string, so you can\n"
"... write many lines&#34;&#34;&#34;\n"
"&#62;&#62;&#62; print s\n"
" This is a\n"
"multiline string, so you can\n"
"write many lines\n"
"\n"
""
msgstr ""

#. Tag: title
#, no-c-format
msgid "Different methods available for Strings"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Every string object is having couple of buildin methods available, we already saw some of them like <emphasis>s.split(&#34; &#34;)</emphasis>."
msgstr ""

#. Tag: screen
#, no-c-format
msgid "\n"
"\n"
"&#62;&#62;&#62; s = &#34;kushal das&#34;\n"
"&#62;&#62;&#62; s.title()\n"
"&#39;Kushal Das&#39; \n"
"\n"
""
msgstr ""

#. Tag: para
#, no-c-format
msgid "<emphasis>title()</emphasis> method returns a titlecased version of the string, words start with uppercase characters, all remaining cased characters are lowercase."
msgstr ""

#. Tag: screen
#, no-c-format
msgid "\n"
"\n"
"&#62;&#62;&#62; z = s.upper()\n"
"&#62;&#62;&#62; z\n"
"&#39;KUSHAL DAS&#39;\n"
"&#62;&#62;&#62; z.lower()\n"
"&#39;kushal das&#39;\n"
"\n"
""
msgstr ""

#. Tag: para
#, no-c-format
msgid "<emphasis>upper()</emphasis> returns a total uppercase version whereas <emphasis>lower()</emphasis> returns a lower case version of the string."
msgstr ""

#. Tag: screen
#, no-c-format
msgid "\n"
"\n"
"&#62;&#62;&#62; s = &#34;I am A pRoGraMMer&#34;\n"
"&#62;&#62; s.swapcase()\n"
"&#39;i AM a PrOgRAmmER&#39;\n"
"\n"
""
msgstr ""

#. Tag: para
#, no-c-format
msgid "<emphasis>swapcase()</emphasis> returns the string with case swapped :)"
msgstr ""

#. Tag: screen
#, no-c-format
msgid "\n"
"\n"
"&#62;&#62;&#62; s = &#34;jdwb 2323bjb&#34;\n"
"&#62;&#62;&#62; s.isalnum()\n"
"False\n"
"&#62;&#62;&#62; s = &#34;jdwb2323bjb&#34;\n"
"&#62;&#62;&#62; s.isalnum()\n"
"True\n"
"\n"
""
msgstr ""

#. Tag: para
#, no-c-format
msgid "Because of the space in the first line <emphasis>isalnum()</emphasis> returned <emphasis>False</emphasis> , it checks for all charecters are alpha numeric or not."
msgstr ""

#. Tag: screen
#, no-c-format
msgid "\n"
"\n"
"&#62;&#62;&#62; s = &#34;SankarshanSir&#34;\n"
"&#62;&#62;&#62; s.isalpha()\n"
"True\n"
"&#62;&#62;&#62; s = &#34;Sankarshan Sir&#34;\n"
"&#62;&#62;&#62; s.isalpha()\n"
"False\n"
"\n"
""
msgstr ""

#. Tag: para
#, no-c-format
msgid "<emphasis>isalpha()</emphasis> checkes for only alphabets."
msgstr ""

#. Tag: screen
#, no-c-format
msgid "\n"
"\n"
"&#62;&#62;&#62; s = &#34;1234&#34;\n"
"&#62;&#62;&#62; s.isdigit() #To check if all the characters are digits or not\n"
"True\n"
"&#62;&#62;&#62; s = &#34;Fedora9 is coming&#34;\n"
"&#62;&#62;&#62; s.islower() # To check if all chracters are lower case or not\n"
"False\n"
"&#62;&#62;&#62; s = &#34;Fedora9 Is Coming&#34; \n"
"&#62;&#62;&#62; s.istitle() # To check if it is a title or not\n"
"True\n"
"&#62;&#62;&#62; s = &#34;INDIA&#34;\n"
"&#62;&#62;&#62; s.isupper() # To check if characters are in upper case or not\n"
"True\n"
"\n"
""
msgstr ""

#. Tag: para
#, no-c-format
msgid "To split any string we have <emphasis>split()</emphasis>. It takes a string as an argument , depending on that it will split the main string and returns a list containing splitted strings."
msgstr ""

#. Tag: screen
#, no-c-format
msgid "\n"
"\n"
"&#62;&#62;&#62; s = &#34;We all love Python&#34;\n"
"&#62;&#62;&#62; s.split(&#34; &#34;)\n"
"[&#39;We&#39;, &#39;all&#39;, &#39;love&#39;, &#39;Python&#39;]\n"
"&#62;&#62;&#62; x = &#34;Nishant:is:waiting&#34;\n"
"&#62;&#62;&#62; x.split(&#39;:&#39;)\n"
"[&#39;Nishant&#39;, &#39;is&#39;, &#39;waiting&#39;]\n"
"\n"
""
msgstr ""

#. Tag: para
#, no-c-format
msgid "The opposite method for <emphasis>split()</emphasis> is <emphasis>join()</emphasis>. It takes a list contains strings as input and join them."
msgstr ""

#. Tag: screen
#, no-c-format
msgid "\n"
"\n"
"&#62;&#62;&#62; &#34;-&#34;.join(&#34;GNU/Linux is great&#34;.split(&#34; &#34;))\n"
"&#39;GNU/Linux-is-great&#39;\n"
"\n"
""
msgstr ""

#. Tag: para
#, no-c-format
msgid "In the above example first we are splitting the string &#34;GNU/Linux is great&#34; based on the white space, then joining them with &#34;-&#34;."
msgstr ""

#. Tag: title
#, no-c-format
msgid "String the strings"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Strings do have few methods to do striping. The simplest one is <emphasis>strip(chars)</emphasis>. If you provide the chars argument then it will strip any combination of them. By default it strips only whitespace or newline characters."
msgstr ""

#. Tag: screen
#, no-c-format
msgid "\n"
"\n"
"&#62;&#62;&#62; s = &#34;  abc\n"
" &#34;\n"
"&#62;&#62;&#62; s.strip()\n"
"&#39;abc&#39;\n"
"\n"
""
msgstr ""

#. Tag: para
#, no-c-format
msgid "You can particularly strip from the left hand or right hand side also using <emphasis>lstrip(chars)</emphasis> or <emphasis>rstrip(chars)</emphasis>."
msgstr ""

#. Tag: screen
#, no-c-format
msgid "\n"
"\n"
"&#62;&#62;&#62; s = &#34;www.foss.in&#34;\n"
"&#62;&#62;&#62; s.lstrip(&#34;cwsd.&#34;)\n"
"&#39;foss.in&#39;\n"
"&#62;&#62;&#62; s.rstrip(&#34;cnwdi.&#34;)\n"
"&#39;www.foss&#39;\n"
"\n"
""
msgstr ""

#. Tag: title
#, no-c-format
msgid "Finding text"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Stings have some methods which will help you in finding text/substring in a string. Examples are given below:"
msgstr ""

#. Tag: screen
#, no-c-format
msgid "\n"
"\n"
"&#62;&#62;&#62; s.find(&#34;for&#34;)\n"
"7\n"
"&#62;&#62;&#62; s.find(&#34;fora&#34;)\n"
"-1\n"
"&#62;&#62;&#62; s.startswith(&#34;fa&#34;) #To check if the string startswith fa or not\n"
"True\n"
"&#62;&#62;&#62; s.endswith(&#34;reason&#34;) #\n"
"True\n"
"\n"
""
msgstr ""

#. Tag: para
#, no-c-format
msgid "<emphasis>find()</emphasis> helps to find the first occurrence of the substring given, if not found it returns -1."
msgstr ""

#. Tag: title
#, no-c-format
msgid "Palindrome checking"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Palindrome are the kind of strings which are same from left or right whichever way you read them. Example &#34;madam&#34;. In this example we will take the word as input from the user and say if it is palindrome or not."
msgstr ""

#. Tag: screen
#, no-c-format
msgid "\n"
"\n"
"#!/usr/bin/env python\n"
"s = raw_input(&#34;Please enter a string: &#34;)\n"
"z = [x for x in s]\n"
"z.reverse()\n"
"if s == &#34;&#34;.join(z):\n"
"    print &#34;The string is a palindrome&#34;\n"
"else:\n"
"    print &#34;The string is not a palindrome&#34;\n"
"\n"
""
msgstr ""

#. Tag: para
#, no-c-format
msgid "The output"
msgstr ""

#. Tag: screen
#, no-c-format
msgid "\n"
"\n"
"[kd@kdlappy book]$ ./palindrome.py\n"
"Please enter a string: madam1\n"
"The string is not a palindrome\n"
"[kd@kdlappy book]$ ./palindrome.py\n"
"Please enter a string: madam\n"
"The string is a palindrome\n"
"\n"
""
msgstr ""

#. Tag: title
#, no-c-format
msgid "Number of words"
msgstr ""

#. Tag: para
#, no-c-format
msgid "In this example we will count the number of words in a given line"
msgstr ""

#. Tag: screen
#, no-c-format
msgid "\n"
"\n"
"#!/usr/bin/env python\n"
"s = raw_input(&#34;Enter a line: &#34;)\n"
"print &#34;The number of words in the line are %d&#34; % (len(s.split(&#34; &#34;)))\n"
"\n"
""
msgstr ""

#. Tag: screen
#, no-c-format
msgid "\n"
"\n"
"[kd@kdlappy book]$ ./countwords.py\n"
"Enter a line: Sayamindu is a great programmer\n"
"The number of words in the line are 5 \n"
"\n"
""
msgstr ""

