msgid ""
msgstr ""
"Project-Id-Version: Python_for_you_and_me\n"
"Report-Msgid-Bugs-To: http://bugs.kde.org\n"
"POT-Creation-Date: 2010-09-27T11:50:13\n"
"PO-Revision-Date: \n"
"Last-Translator: LiJiansheng <lijiangsheng1@gmail.com>\n"
"Language-Team: lijiangsheng1@gmail.com <lijiangsheng1@gmail.com>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Poedit-Language: Chinese\n"
"X-Poedit-Country: CHINA\n"

#. Tag: title
#, no-c-format
msgid "The Beginning"
msgstr "初光乍现"

#. Tag: para
#, no-c-format
msgid "So we are going to look at our first code. As python is an interpreted language , you can directly write the code into the python interpreter or write in a file and then run the file. First we are going to do that using the interpreter, to start type python in the command prompt (shell or terminal)."
msgstr "现在我们来看下我们的第一次编码。众所周知,python是一门解释性语言,你可以在python解释器中直接写代码,也可以将之写到文件中,然后执行这个文件。首先,我们将用python的解释器来作示范,启动python:在终端或shell下键入“python\":"

#. Tag: screen
#, no-c-format
msgid ""
"\n"
"[kd@kdlappy ~]$ python\n"
"Python 2.5.1 (r251:54863, Oct 30 2007, 13:54:11)\n"
"[GCC 4.1.2 20070925 (Red Hat 4.1.2-33)] on linux2\n"
"Type &#34;help&#34;, &#34;copyright&#34;, &#34;credits&#34; or &#34;license&#34; for more information. \n"
"&#62;&#62;&#62; \n"
"\n"
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid "In our first code we are going to print &#34;Hello World!&#34; , so do it as below,"
msgstr "作为第一次编码,我们将打印经典的\"Hello World!\",如下所示:"

#. Tag: screen
#, no-c-format
msgid ""
"\n"
"&#62;&#62;&#62; print &#34;Hello World!&#34;\n"
"Hello World!\n"
msgstr ""

#. Tag: title
#, no-c-format
msgid "helloworld.py"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Now as a serious programmer you may want to write the above code into a source file. We will create a helloworld.py. Use any text editor you like to create the file. I used vi, you can even use GUI based tools like Kate, gedit too."
msgstr "作为正式的程序员,你可能要将上述代码写到一个文件。那么我们来建立一个文件名为helloworld.py的文件,用你喜欢的任何编辑器,我用的是vi,你可以使用基于GUI的工具,如kate,gedit等。"

#. Tag: screen
#, no-c-format
msgid ""
"\n"
"#!/usr/bin/env python\n"
"print &#34;Hello World!&#34;\n"
msgstr ""

#. Tag: para
#, no-c-format
msgid "To run the code first you have to make the file executable, in GNU/Linux you can do that by giving the command in a shell or terminal"
msgstr "欲运行上述写下的代码,你首先得使文件属性为可执行,在GNU/Linux环境下,你可以在shell中执行如下命令:"

#. Tag: screen
#, no-c-format
msgid ""
"\n"
"$ chmod +x helloworld.py\n"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Then"
msgstr "这时你可以执行此文件了。"

#. Tag: screen
#, no-c-format
msgid ""
"\n"
"$ ./helloworld.py \n"
"Hello World!\n"
msgstr ""

#. Tag: para
#, no-c-format
msgid "On the first line you can <emphasis>#!</emphasis> , we call it sha-bang. Using this we are telling that use python interpreter to run this code. In the next line we are printing a text message. In python we call all the line of texts as strings."
msgstr "在代码的第一行我们以#! 开始,我们称之为sha-bang。这样做的目的是告诉shell用python解释器来执行下面代码。接下来的一行,仅仅是打印一条信息。在python中我们认为所有的文本行都是strings类型(下面会讲到python数据类型--译者注)。"

#. Tag: title
#, no-c-format
msgid "Whitespaces and indentation"
msgstr "空格和缩进"

#. Tag: para
#, no-c-format
msgid "In Python whitespace is an important thing. We divide different identifiers using spaces.Whitespace in the beginning of the line is known as indentation, but if you give wrong indentation it will throw an error. Examples are given below:"
msgstr "在python语言中,空格很重要。我们使用空格将标志符区分开。空格在行的开始处被称之为缩排,但是如果你写了错误的缩排,python解释器将抛出错误。例如下面情形:"

#. Tag: screen
#, no-c-format
msgid ""
"\n"
"\n"
"&#62;&#62;&#62; a = 12\n"
"&#62;&#62;&#62;  a = 12\n"
"  File &#34;&#60;stdin&#62;&#34;, line 1\n"
"      a = 12\n"
"          ^\n"
"          IndentationError: unexpected indent\n"
msgstr ""

#. Tag: title
#, no-c-format
msgid "Warning"
msgstr "警告"

#. Tag: para
#, no-c-format
msgid "There is an extra space in the beginning of the second line which is causing the error, so always look for the proper indentation."
msgstr "在第二行的开始处出现了多余的空格,以至于引起错误。所以要经常检查合适的缩排!"

#. Tag: para
#, fuzzy, no-c-format
msgid "You can even get into this indentation errors if you mix up tabs and spaces. Like if you use spaces and only use spaces for indentation, don&#39;t use tabs in that case. For you it may look same, but the code will give you error if you try to run it."
msgstr "如果你混合使用制表符和空格,这种缩排错误会常见。所以建议如果使用空格,就一直用空格作缩排,不要使用制表符。对于你来说他们俩是一样的,但是你试图去运行的时候,代码会给你抛出错误"

#. Tag: title
#, no-c-format
msgid "Comments"
msgstr "注释"

#. Tag: para
#, fuzzy, no-c-format
msgid "Comments are some piece of English text which explains what this code does, we write comments in the code so that is easier for others to understand. A comment line starts with <emphasis>#</emphasis> , everything after that is ignored as comment, that means they don&#39;t effect on the program."
msgstr "注释是一些英语文本方式提供解释此处代码是做什么的,我们写在代码中写注释是便于其他人容易理解。python的注释是以#开始的行,注释在程序中将被忽略,也就是说对程序没有任何的作用。"

#. Tag: screen
#, no-c-format
msgid ""
"\n"
"\n"
"&#62;&#62;&#62; #this is a comment\n"
"&#62;&#62;&#62; #the next line will add two numbers\n"
"&#62;&#62;&#62; a = 12 + 34\n"
"&#62;&#62;&#62; print c #this is a comment too :)\n"
msgstr ""

#. Tag: title
#, no-c-format
msgid "Modules"
msgstr "模块"

#. Tag: para
#, no-c-format
msgid "Modules are python files which contain different function definitions , variables which we can reuse, it should always end with a .py extension.. Python itself is having a vast module library with the default installation. We are going to use some of them. To use a module you have to import it first."
msgstr "模块是包含可以直接使用(重用)的函数定义、变量的python文件,它们通常是以.py为扩展名。Python本身在安装时就带有大量的模块。我们将会用到一部分。欲使用模块你首先的将之导入(import)。"

#. Tag: screen
#, no-c-format
msgid ""
"\n"
"\n"
"&#62;&#62;&#62; import math\n"
"&#62;&#62;&#62; print math.e\n"
"2.71828182846\n"
"\n"
msgstr ""

#. Tag: para
#, no-c-format
msgid "We are going to learn more about modules on the Modules chapter."
msgstr "我们将会在Modules那章中学习更多的关于模块的内容。"
