msgid ""
msgstr ""
"Project-Id-Version: python_for_you_and_me\n"
"Report-Msgid-Bugs-To: http://bugs.kde.org\n"
"POT-Creation-Date: 2010-09-27T11:50:13\n"
"PO-Revision-Date: \n"
"Last-Translator: LiJiansheng <lijiangsheng1@gmail.com>\n"
"Language-Team: lijiangsheng1@gmail.com <lijiangsheng1@gmail.com>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Poedit-Language: Chinese\n"
"X-Poedit-Country: CHINA\n"

#. Tag: title
#, no-c-format
msgid "Looping"
msgstr "循环"

#. Tag: para
#, no-c-format
msgid "In the examples we used before , sometimes it was required to do the same work couple of times. We use a counter to check how many times the code needs to be executed. This technique is known as looping. First we are going to look into while statement for looping."
msgstr "在以前我们用过的例子中，有时候会遇到作同样的事情多次这种需求。我们用计数器去检查究竟是需要多少次代码执行，这种技术就是众所周知的循环。首先我们来学习while语句实现的循环。"

#. Tag: title
#, no-c-format
msgid "While loop"
msgstr "While循环"

#. Tag: para
#, no-c-format
msgid "The syntax for <emphasis>while</emphasis> statement is like"
msgstr "<emphasis>while</emphasis>语句的语法规则如下"

#. Tag: screen
#, no-c-format
msgid ""
"\n"
"\n"
"while condition:\n"
"    statement1\n"
"    statement2\n"
"\n"
msgstr ""

#. Tag: para
#, no-c-format
msgid "The code we want to reuse must be indented properly under the while statement. They will be executed if the <emphasis>condition</emphasis> is true. Again like in <emphasis>if-else</emphasis> statement any non zero value is true. Let us write a simple code to print numbers 0 to 10"
msgstr "如果<emphasis>condition</emphasis>条件为真，while语句之下的代码放在while语句之下，将重复执行。正如 语句<emphasis>if-else</emphasis> 不等于0为真。来看一个打印数字0到10的实例"

#. Tag: screen
#, no-c-format
msgid ""
"\n"
"\n"
"&#62;&#62;&#62; n = 0\n"
"&#62;&#62;&#62; while n &#60; 11:\n"
"...     print n\n"
"...     n += 1\n"
"...\n"
"0\n"
"1\n"
"2\n"
"3\n"
"4\n"
"5\n"
"6\n"
"7\n"
"8\n"
"9\n"
"10\n"
"\n"
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid "In the first line we are setting <emphasis>n = 0</emphasis>, then in the while statement the condition is <emphasis>n &#60; 11 </emphasis>, that means what ever line indented below that will execute until n becomes same or greater than 11. Inside the loop we are just printing the value of n and then increasing it by one."
msgstr "在第一行我们初始化 <emphasis>n = 0</emphasis>，接下来给定while的条件<emphasis>n <![CDATA[<]]> 11 </emphasis>，它的意思是直到n 等于或大于11时才停止执行下面的代码。在循环内部我们打印n的值并且每次增加1。"

#. Tag: title
#, no-c-format
msgid "Fibonacci Series"
msgstr "斐波那契数列"

#. Tag: para
#, no-c-format
msgid "Let us try to solve <emphasis>Fibonacci</emphasis> series. In this series we get the next number by adding the previous two numbers. So the series looks like <emphasis>1,1,2,3,5,8,13 .......</emphasis>"
msgstr "让我们试着去解决<emphasis>Fibonacci</emphasis>数列的问题。这此数列中我们知道是下一个数字是其前两个数的和。所以数列看其来是这个样子的<emphasis>1,1,2,3,5,8,13 .......</emphasis>"

#. Tag: screen
#, no-c-format
msgid ""
"\n"
"\n"
"#!/usr/bin/env python\n"
"a, b = 0, 1\n"
"while b &#60; 100:\n"
"    print b\n"
"    a, b = b, a + b\n"
"\n"
msgstr ""

#. Tag: para
#, no-c-format
msgid "The output"
msgstr "输出"

#. Tag: screen
#, no-c-format
msgid ""
"\n"
"\n"
"[kd@kdlappy book]$ ./fibonacci1.py\n"
"1\n"
"1\n"
"2\n"
"3\n"
"5\n"
"8\n"
"13\n"
"21\n"
"34\n"
"55\n"
"89\n"
"\n"
msgstr ""

#. Tag: para
#, fuzzy, no-c-format
msgid "In the first line of the code we are initializing <emphasis>a</emphasis> and <emphasis>b</emphasis>, then looping while b&#39;s value is less than 100. Inside the loop first we are printing the value of <emphasis>b</emphasis> and then in the next line putting the value of <emphasis>b</emphasis> to <emphasis>a</emphasis> and <emphasis>a + b</emphasis> to <emphasis>b</emphasis> in the same line."
msgstr "代码的第一行我们初始化了<emphasis>a</emphasis>和 <emphasis>b</emphasis>，while的条件是b的值小于100.在循环内部我们先打印出<emphasis>b</emphasis>的值，然后紧接着将<emphasis>b</emphasis> 的值给 <emphasis>a</emphasis> ，并且使<emphasis>a + b</emphasis> 的值赋予<emphasis>b</emphasis> 。"

#. Tag: para
#, no-c-format
msgid "If you put a trailing comma in the <emphasis>print</emphasis> statement , then it will print in the same line"
msgstr "如果你在<emphasis>print</emphasis> 语句后加一个逗号，输出将在同一行"

#. Tag: screen
#, no-c-format
msgid ""
"\n"
"\n"
"#!/usr/bin/env python\n"
"a, b = 0, 1\n"
"while b &#60; 100:\n"
"    print b,\n"
"    a, b = b, a + b\n"
"\n"
msgstr ""

#. Tag: screen
#, no-c-format
msgid ""
"\n"
"\n"
"[kd@kdlappy book]$ ./fibonacci2.py\n"
"1 1 2 3 5 8 13 21 34 55 89\n"
"\n"
msgstr ""

#. Tag: title
#, no-c-format
msgid "Power Series"
msgstr "幂级数"

#. Tag: para
#, fuzzy, no-c-format
msgid "Let us write a program to evaluate the power series. The series looks like e**x =1+x+x**2/2! +x**3/3! +....+ x**n/n! where 0 &#60; x &#60; 1"
msgstr "让我们写一个程序来计算幂级数，形如e**x =1+x+x**2/2! +x**3/3! +....+ x**n/n! 当 <![CDATA[0 <x <1]]>"

#. Tag: screen
#, no-c-format
msgid ""
"\n"
"\n"
"#!/usr/bin/env python\n"
"x = float(raw_input(&#34;Enter the value of x: &#34;))\n"
"n = term = num = 1\n"
"sum = 1.0\n"
"while n &#60;= 100:\n"
"    term *= x / n\n"
"    sum += terrm\n"
"    n += 1\n"
"    if term &#60; 0.0001:\n"
"        break\n"
"print &#34;No of Times= %d and Sum= %f&#34; % (n, sum)\n"
"\n"
msgstr ""

#. Tag: screen
#, no-c-format
msgid ""
"\n"
"\n"
"kd@kdlappy book]$ ./powerseries.py\n"
"Enter the value of x: 0\n"
"No of Times= 2 and Sum= 1.000000\n"
"[kd@kdlappy book]$ ./powerseries.py\n"
"Enter the value of x: 0.1\n"
"No of Times= 5 and Sum= 1.105171\n"
"[kd@kdlappy book]$ ./powerseries.py\n"
"Enter the value of x: 0.5\n"
"No of Times= 7 and Sum= 1.648720\n"
msgstr ""

#. Tag: para
#, no-c-format
msgid "In this program we introduced a new keyword called <emphasis>break</emphasis>. What break does is stop the innermost loop. In this example we are using <emphasis>break</emphasis> under the <emphasis>if</emphasis> statement"
msgstr "在此程序中我们介绍了一新的关键字叫做<emphasis>break</emphasis>。break就是终止内部循环。在此例中我们用到的<emphasis>break</emphasis>是在<emphasis>if</emphasis> 语句中"

#. Tag: screen
#, no-c-format
msgid ""
"\n"
"\n"
"if term &#60; 0.0001:\n"
"        break\n"
"\n"
msgstr ""

#. Tag: para
#, no-c-format
msgid "This means if the value of <emphasis>term</emphasis> is less than <emphasis>0.0001</emphasis> then get out of the loop."
msgstr "这句话的意思是当<emphasis>term</emphasis> 的值小于<emphasis>0.0001</emphasis>时跳出循环。"

#. Tag: title
#, no-c-format
msgid "Multiplication Table"
msgstr "乘法表"

#. Tag: para
#, no-c-format
msgid "In this example we are going to print the multiplication table up to 10."
msgstr "此例中我们将打印从1到10的乘法表。"

#. Tag: screen
#, no-c-format
msgid ""
"\n"
"\n"
"#!/usr/bin/env python\n"
"i = 1\n"
"print &#34;-&#34; * 50\n"
"while i &#60; 11:\n"
"    n = 1\n"
"    while n &#60;= 10:\n"
"        print &#34;%4d&#34; % (i * n),\n"
"        n += 1\n"
"    print &#34;&#34;\n"
"    i += 1\n"
"print &#34;-&#34; * 50\n"
"\n"
msgstr ""

#. Tag: screen
#, no-c-format
msgid ""
"\n"
"\n"
"[kd@kdlappy book]$ ./multiplication.py\n"
"--------------------------------------------------\n"
"   1    2    3    4    5    6    7    8    9   10\n"
"   2    4    6    8   10   12   14   16   18   20\n"
"   3    6    9   12   15   18   21   24   27   30\n"
"   4    8   12   16   20   24   28   32   36   40\n"
"   5   10   15   20   25   30   35   40   45   50\n"
"   6   12   18   24   30   36   42   48   54   60\n"
"   7   14   21   28   35   42   49   56   63   70\n"
"   8   16   24   32   40   48   56   64   72   80\n"
"   9   18   27   36   45   54   63   72   81   90\n"
"  10   20   30   40   50   60   70   80   90  100\n"
"--------------------------------------------------\n"
"\n"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Here we used one while loop inside another loop, this is known as nested looping. You can also see one interesting statement here"
msgstr "这里是一个while循环里还有一个while循环，这就是循环的嵌套。你会看到在循环中更有意思的语句"

#. Tag: screen
#, no-c-format
msgid ""
"\n"
"\n"
"print &#34;-&#34; * 50\n"
"\n"
msgstr ""

#. Tag: para
#, no-c-format
msgid "In a <emphasis>print</emphasis> statement if we multiply the string with an integer <emphasis>n</emphasis> , the string will be printed <emphasis>n</emphasis>many times. Some examples"
msgstr "在<emphasis>print</emphasis>语句中，如果我们定义了整数<emphasis>n</emphasis> 个字符，那么这个字符将被打印<emphasis>n</emphasis>次。如下例子"

#. Tag: screen
#, no-c-format
msgid ""
"\n"
"\n"
"&#62;&#62;&#62; print &#34;*&#34; * 10\n"
"**********\n"
"&#62;&#62;&#62; print &#34;#&#34; * 20\n"
"####################\n"
"&#62;&#62;&#62; print &#34;--&#34; * 20\n"
"----------------------------------------\n"
"&#62;&#62;&#62; print &#34;-&#34; * 40\n"
"----------------------------------------\n"
"\n"
msgstr ""

#. Tag: title
#, no-c-format
msgid "Some printing * examples"
msgstr "一些打印*的实例"

#. Tag: para
#, no-c-format
msgid "Here are some examples which you can find very often in college lab reports"
msgstr "如下的几个例子，你会在大学实验室的报告里会经常看到"

#. Tag: para
#, no-c-format
msgid "Design 1"
msgstr "设计 1"

#. Tag: screen
#, no-c-format
msgid ""
"\n"
"\n"
"#!/usr/bin/env python\n"
"row = int(raw_input(&#34;Enter the number of rows: &#34;))\n"
"n = row\n"
"while n &#62;= 0:\n"
"    x =  &#34;*&#34; * n\n"
"    print x\n"
"    n -= 1\n"
"\n"
msgstr ""

#. Tag: screen
#, no-c-format
msgid ""
"\n"
"\n"
"[kd@kdlappy book]$ ./design1.py\n"
"Enter the number of rows: 5\n"
"*****\n"
"****\n"
"***\n"
"**\n"
"*\n"
"\n"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Design 2"
msgstr "设计 2"

#. Tag: screen
#, no-c-format
msgid ""
"\n"
"\n"
"#!/usr/bin/env python\n"
"n = int(raw_input(&#34;Enter the number of rows: &#34;))\n"
"i = 1\n"
"while i &#60;= n:\n"
"    print &#34;*&#34; * i\n"
"    i += 1\n"
"\n"
msgstr ""

#. Tag: screen
#, no-c-format
msgid ""
"\n"
"\n"
"[kd@kdlappy book]$ ./design2.py\n"
"Enter the number of rows: 5\n"
"*\n"
"**\n"
"***\n"
"****\n"
"*****\n"
"\n"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Design 3"
msgstr "设计 3"

#. Tag: screen
#, no-c-format
msgid ""
"\n"
"\n"
"#!/usr/bin/env python\n"
"row = int(raw_input(&#34;Enter the number of rows: &#34;))\n"
"n = row\n"
"while n &#62;= 0:\n"
"    x =  &#34;*&#34; * n\n"
"    y = &#34; &#34; * (row - n)\n"
"    print y + x\n"
"    n -= 1\n"
"\n"
msgstr ""

#. Tag: screen
#, no-c-format
msgid ""
"\n"
"\n"
"[kd@kdlappy book]$ ./design3.py\n"
"Enter the number of rows: 5\n"
"*****\n"
" ****\n"
"  ***\n"
"   **\n"
"    *\n"
"\n"
msgstr ""

#. Tag: title
#, no-c-format
msgid "Lists"
msgstr "列表"

#. Tag: para
#, no-c-format
msgid "We are going to learn a data structure called list before we go ahead to learn more on looping. Lists an be written as a list of comma-separated values (items) between square brackets."
msgstr "在进一步学习循环之前，我们先学习一个叫做list的数据结构。Lists（列表）的写法是用中括号括起来的每个值（项）都用逗号分开。"

#. Tag: screen
#, no-c-format
msgid ""
"\n"
"\n"
"&#62;&#62;&#62; a = [ 1 , 342, 2233423, &#39;India&#39;, &#39;Fedora&#39;]\n"
"&#62;&#62;&#62; a\n"
"[1, 342, 2233423, &#39;India&#39;, &#39;Fedora&#39;]\n"
"\n"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Lists can keep any other data inside it. It works as a sequence too, that means"
msgstr "列表中可以保存任何数据，它也可以用于队列，意思是"

#. Tag: screen
#, no-c-format
msgid ""
"\n"
"\n"
"&#62;&#62;&#62; a[0]\n"
"1\n"
"&#62;&#62;&#62; a[4]\n"
"&#39;Fedora&#39;\n"
"\n"
msgstr ""

#. Tag: para
#, no-c-format
msgid "You can even slice it into different pieces, examples are given below"
msgstr "你可以利用切片将之分成不同的部分，如下实例"

#. Tag: screen
#, no-c-format
msgid ""
"\n"
"\n"
"&#62;&#62;&#62; a[4]\n"
"&#39;Fedora&#39;\n"
"&#62;&#62;&#62; a[-1]\n"
"&#39;Fedora&#39;\n"
"&#62;&#62;&#62; a[-2]\n"
"&#39;India&#39;\n"
"&#62;&#62;&#62; a[0:-1]\n"
"[1, 342, 2233423, &#39;India&#39;]\n"
"&#62;&#62;&#62; a[2:-2]\n"
"[2233423]\n"
"&#62;&#62;&#62; a[:-2]\n"
"[1, 342, 2233423]\n"
"&#62;&#62;&#62; a[0::2]\n"
"[1, 2233423, &#39;Fedora&#39;]\n"
msgstr ""

#. Tag: para
#, no-c-format
msgid "In the last example we used two :(s) , the last value inside the third brackets indicates step. <emphasis>s[i:j:k]</emphasis> means slice of <emphasis>s</emphasis> from <emphasis>i</emphasis> to <emphasis>j</emphasis> with step <emphasis>k</emphasis>."
msgstr "最后一个例子我们用到了两个:(s)，在中括号里的最后一个值指定步骤。<emphasis>s[i:j:k]</emphasis>的意思是从 <emphasis>i</emphasis> 到<emphasis>j</emphasis> with用了<emphasis>k</emphasis>步将<emphasis>s</emphasis>切片."

#. Tag: para
#, no-c-format
msgid "To check if any value exists within the list or not you can do"
msgstr "检查列表中是否含有给定的值"

#. Tag: screen
#, no-c-format
msgid ""
"\n"
"\n"
"&#62;&#62;&#62; a = [&#39;Fedora&#39;, &#39;is&#39;, &#39;cool&#39;]\n"
"&#62;&#62;&#62; &#39;cool&#39; in a\n"
"True\n"
"&#62;&#62;&#62; &#39;Linux&#39; in a\n"
"False\n"
"\n"
msgstr ""

#. Tag: para
#, no-c-format
msgid "That means we can use the above statement as <emphasis>if</emphasis> clause expression. The built-in function <emphasis>len()</emphasis> can tell the length of a list."
msgstr "意思是我们可以使用上述的语句像<emphasis>if</emphasis>子句表达式一样。内建函数<emphasis>len()</emphasis>可以返回列表的长度。"

#. Tag: screen
#, no-c-format
msgid ""
"\n"
"\n"
"&#62;&#62;&#62; len(a)\n"
"3\n"
"\n"
msgstr ""

#. Tag: title
#, no-c-format
msgid "For loop"
msgstr "For 循环"

#. Tag: para
#, no-c-format
msgid "There is another to loop by using <emphasis>for</emphasis> statement. In python the <emphasis>for</emphasis> statement is different from the way it works in <emphasis>C</emphasis>. Here for statement iterates over the items of any sequence (a list or a string). Example given below"
msgstr "另外一个更常见的循环语句是<emphasis>for</emphasis> 。在Python中<emphasis>for</emphasis> 语句是和<emphasis>C</emphasis>中有着不同。这里是for语句的一个重复队列项（列表或字符）的例子。"

#. Tag: screen
#, no-c-format
msgid ""
"\n"
"\n"
"&#62;&#62;&#62; a = [&#39;Fedora&#39;, &#39;is&#39;, &#39;powerfull&#39;]\n"
"&#62;&#62;&#62; for x in a:\n"
"...     print x,\n"
"...\n"
"Fedora is powerfull\n"
"\n"
msgstr ""

#. Tag: para
#, no-c-format
msgid "We can also do things like"
msgstr "我们也可以像这样去做"

#. Tag: screen
#, no-c-format
msgid ""
"\n"
"&#62;&#62;&#62; a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n"
"&#62;&#62;&#62; for x in a[::2]:\n"
"...     print x\n"
"...\n"
"1\n"
"3\n"
"5\n"
"7\n"
"9\n"
msgstr ""

#. Tag: title
#, no-c-format
msgid "range() function"
msgstr "range()函数"

#. Tag: para
#, no-c-format
msgid "range() is a buitin function. From the help document"
msgstr "range() 是一内建的函数，查看帮助文档会得到如下内容"

#. Tag: screen
#, no-c-format
msgid ""
"\n"
"\n"
"range(...)\n"
"    range([start,] stop[, step]) -&#62; list of integers\n"
"    Return a list containing an arithmetic progression of integers.\n"
"    range(i, j) returns [i, i+1, i+2, ..., j-1]; start (!) defaults to 0.\n"
"    When step is given, it specifies the increment (or decrement).\n"
"    For example, range(4) returns [0, 1, 2, 3].  The end point is omitted!\n"
"    These are exactly the valid indices for a list of 4 elements.\n"
"\n"
msgstr ""

#. Tag: para
#, no-c-format
msgid "Now if you want to see this help message on your system type <emphasis>help(range)</emphasis> in the python interpreter. <emphasis>help(s)</emphasis> will return help message on the object <emphasis>s</emphasis>. Examples of <emphasis>range</emphasis> function"
msgstr "这个时候如果你想在你的系统里查看帮助信息，在python解释器中敲入<emphasis>help(range)</emphasis>即可。<emphasis>help(s)</emphasis>返回对象<emphasis>s</emphasis>的帮助信息。<emphasis>range</emphasis> 函数的例子"

#. Tag: screen
#, no-c-format
msgid ""
"\n"
"\n"
"&#62;&#62;&#62; range(1,5)\n"
"[1, 2, 3, 4]\n"
"&#62;&#62;&#62; range(1,15,3)\n"
"[1, 4, 7, 10, 13]\n"
"&#62;&#62;&#62; range(10)\n"
"[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n"
"\n"
msgstr ""

#. Tag: title
#, no-c-format
msgid "Continue statement"
msgstr "Continue 语句"

#. Tag: para
#, no-c-format
msgid "Just like <emphasis>break</emphasis> we have another statement, <emphasis>continue</emphasis>, which skips the execution of the code after itself and goes back to the start of the loop. That means it will help you to skip a part of the loop. In the below example we will ask the user to input an integer, if the input is negative then we will ask again, if positive then we will square the number. To get out of the infinite loop user must input 0."
msgstr "和<emphasis>break</emphasis> 语句一样的另外一个忽略当前循环条件并返回到循环的开始的语句是<emphasis>continue</emphasis>，这意味着它可以帮助你忽略一部分循环。下面的例子中我们将对用户的输入整型进行提问，如果输入负数我们接着问，否则我们给出其平方后的值。退出循环你必须输入数字0."

#. Tag: screen
#, no-c-format
msgid ""
"\n"
"\n"
"#!/usr/bin/env python\n"
"while True:\n"
"    n = int(raw_input(&#34;Please enter an Integer: &#34;))\n"
"    if n &#60; 0:\n"
"        continue #this will take the execution back to the starting of the loop\n"
"    elif n == 0:\n"
"        break\n"
"    print &#34;Square is &#34;, n ** 2\n"
"print &#34;Goodbye&#34;\n"
"\n"
msgstr ""

#. Tag: screen
#, no-c-format
msgid ""
"\n"
"[kd@kdlappy book]$ ./continue.py\n"
"Please enter an Integer: 34\n"
"Square is 1156\n"
"Please enter an Integer: 4\n"
"Square is 16\n"
"Please enter an Integer: -9\n"
"Please enter an Integer: 0\n"
"Goodbye\n"
msgstr ""

#. Tag: title
#, no-c-format
msgid "Else loop"
msgstr "Else循环"

#. Tag: para
#, no-c-format
msgid "We can have an optional <emphasis>else</emphasis> statement after any loop. It will be executed after the loop unless a <emphasis>break</emphasis> statement stopped the loop."
msgstr "我们可以赋予loop循环之后的<emphasis>else</emphasis>语句内容，以便于在循环之后执行，当然在有<emphasis>break</emphasis> 语句停止循环的情况下例外。"

#. Tag: screen
#, no-c-format
msgid ""
"\n"
"\n"
"&#62;&#62;&#62; for i in range(0,5):\n"
"...     print i\n"
"... else:\n"
"...     print &#34;Bye bye&#34;\n"
"...\n"
"0\n"
"1\n"
"2\n"
"3\n"
"4\n"
"Bye bye\n"
"\n"
msgstr ""

#. Tag: para
#, no-c-format
msgid "We will see more example of <emphasis>break</emphasis> and <emphasis>continue</emphasis> later in the book."
msgstr "在本书的以后，你将会看到更多的关于<emphasis>break</emphasis> 和<emphasis>continue</emphasis>例子。"

#. Tag: title
#, no-c-format
msgid "Game of sticks"
msgstr ""

#. Tag: para
#, no-c-format
msgid "This is a very simple game of sticks. There are 21 sticks, first the user picks number of sticks between 1-4, then the computer picks sticks(1-4). Who ever will pick the last stick will loose. Can you find out the case when the user will win ?"
msgstr ""

#. Tag: screen
#, no-c-format
msgid ""
"\n"
"\n"
"#!/usr/bin/env python\n"
"\n"
"sticks = 21\n"
"\n"
"print &#34;There are 21 sticks, you can take 1-4 number of sticks at a time.&#34;\n"
"print &#34;Whoever will take the last stick will loose&#34;\n"
"\n"
"while True:\n"
"    print &#34;Sticks left: &#34; , sticks\n"
"    sticks_taken = int(raw_input(&#34;Take sticks(1-4):&#34;))\n"
"    if sticks == 1:\n"
"        print &#34;You took the last stick, you loose&#34;\n"
"        break\n"
"    if sticks_taken &#62;=5 or sticks_taken &#60;=0:\n"
"        print &#34;Wrong choice&#34;\n"
"        continue\n"
"    print &#34;Computer took: &#34; , (5 - sticks_taken) , &#34;\n"
"\n"
"&#34;\n"
"    sticks -= 5\n"
"\n"
"\n"
msgstr ""
